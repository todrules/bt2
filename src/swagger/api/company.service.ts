/**
 * bt-server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType } from '@angular/http';

import { Observable } from 'rxjs/Observable';
import '../rxjs-operators';

import { Company } from '../model/company';
import { Employee } from '../model/employee';
import { InlineResponse200 } from '../model/inlineResponse200';
import { InlineResponse2001 } from '../model/inlineResponse2001';
import { InlineResponse2002 } from '../model/inlineResponse2002';
import { Transaction } from '../model/transaction';

import { COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { BASE_PATH } from '../../env/environment';

@Injectable()
export class CompanyService {

  protected basePath = 'https://localhost/api';
  public defaultHeaders: Headers = new Headers();
  public configuration: Configuration = new Configuration();

  constructor (protected http: Http, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   *
   * Extends object by coping non-existing properties.
   * @param objA object to be extended
   * @param objB source object
   */
  private extendObj<T1, T2> (objA: T1, objB: T2) {
    for (let key in objB) {
      if (objB.hasOwnProperty(key)) {
        (objA as any)[key] = (objB as any)[key];
      }
    }
    return <T1 & T2>objA;
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm (consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (let consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   *
   * @summary Count instances of the model matched by where from the data source.
   * @param where Criteria to match model instances
   */
  public companyCount (where?: string, extraHttpRequestParams?: any): Observable<InlineResponse200> {
    return this.companyCountWithHttpInfo(where, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Create a new instance of the model and persist it into the data source.
   * @param data Model instance data
   */
  public companyCreate (data?: Company, extraHttpRequestParams?: any): Observable<Company> {
    return this.companyCreateWithHttpInfo(data, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Create a change stream.
   * @param options
   */
  public companyCreateChangeStreamGetCompaniesChangeStream (options?: string, extraHttpRequestParams?: any): Observable<Blob | undefined> {
    return this.companyCreateChangeStreamGetCompaniesChangeStreamWithHttpInfo(options, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.blob();
        }
      });
  }

  /**
   *
   * @summary Create a change stream.
   * @param options
   */
  public companyCreateChangeStreamPostCompaniesChangeStream (options?: string, extraHttpRequestParams?: any): Observable<Blob | undefined> {
    return this.companyCreateChangeStreamPostCompaniesChangeStreamWithHttpInfo(options, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.blob();
        }
      });
  }

  /**
   *
   * @summary Delete a model instance by {{id}} from the data source.
   * @param id Model id
   */
  public companyDeleteById (id: string, extraHttpRequestParams?: any): Observable<any> {
    return this.companyDeleteByIdWithHttpInfo(id, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Check whether a model instance exists in the data source.
   * @param id Model id
   */
  public companyExistsGetCompaniesidExists (id: string, extraHttpRequestParams?: any): Observable<InlineResponse2001> {
    return this.companyExistsGetCompaniesidExistsWithHttpInfo(id, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Check whether a model instance exists in the data source.
   * @param id Model id
   */
  public companyExistsHeadCompaniesid (id: string, extraHttpRequestParams?: any): Observable<InlineResponse2001> {
    return this.companyExistsHeadCompaniesidWithHttpInfo(id, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Find all instances of the model matched by filter from the data source.
   * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;})
   */
  public companyFind (filter?: string, extraHttpRequestParams?: any): Observable<Array<Company>> {
    return this.companyFindWithHttpInfo(filter, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Find a model instance by {{id}} from the data source.
   * @param id Model id
   * @param filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;})
   */
  public companyFindById (id: string, filter?: string, extraHttpRequestParams?: any): Observable<Company> {
    return this.companyFindByIdWithHttpInfo(id, filter, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Find first instance of the model matched by filter from the data source.
   * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;})
   */
  public companyFindOne (filter?: string, extraHttpRequestParams?: any): Observable<Company> {
    return this.companyFindOneWithHttpInfo(filter, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Patch an existing model instance or insert a new one into the data source.
   * @param data Model instance data
   */
  public companyPatchOrCreate (data?: Company, extraHttpRequestParams?: any): Observable<Company> {
    return this.companyPatchOrCreateWithHttpInfo(data, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Counts employees of Company.
   * @param id Company id
   * @param where Criteria to match model instances
   */
  public companyPrototypeCountEmployees (id: string, where?: string, extraHttpRequestParams?: any): Observable<InlineResponse200> {
    return this.companyPrototypeCountEmployeesWithHttpInfo(id, where, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Counts transactions of Company.
   * @param id Company id
   * @param where Criteria to match model instances
   */
  public companyPrototypeCountTransactions (id: string, where?: string, extraHttpRequestParams?: any): Observable<InlineResponse200> {
    return this.companyPrototypeCountTransactionsWithHttpInfo(id, where, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Creates a new instance in employees of this model.
   * @param id Company id
   * @param data
   */
  public companyPrototypeCreateEmployees (id: string, data?: Employee, extraHttpRequestParams?: any): Observable<Employee> {
    return this.companyPrototypeCreateEmployeesWithHttpInfo(id, data, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Creates a new instance in transactions of this model.
   * @param id Company id
   * @param data
   */
  public companyPrototypeCreateTransactions (id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Transaction> {
    return this.companyPrototypeCreateTransactionsWithHttpInfo(id, data, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Deletes all employees of this model.
   * @param id Company id
   */
  public companyPrototypeDeleteEmployees (id: string, extraHttpRequestParams?: any): Observable<{}> {
    return this.companyPrototypeDeleteEmployeesWithHttpInfo(id, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Deletes all transactions of this model.
   * @param id Company id
   */
  public companyPrototypeDeleteTransactions (id: string, extraHttpRequestParams?: any): Observable<{}> {
    return this.companyPrototypeDeleteTransactionsWithHttpInfo(id, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Delete a related item by id for employees.
   * @param fk Foreign key for employees
   * @param id Company id
   */
  public companyPrototypeDestroyByIdEmployees (fk: string, id: string, extraHttpRequestParams?: any): Observable<{}> {
    return this.companyPrototypeDestroyByIdEmployeesWithHttpInfo(fk, id, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Delete a related item by id for transactions.
   * @param fk Foreign key for transactions
   * @param id Company id
   */
  public companyPrototypeDestroyByIdTransactions (fk: string, id: string, extraHttpRequestParams?: any): Observable<{}> {
    return this.companyPrototypeDestroyByIdTransactionsWithHttpInfo(fk, id, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Find a related item by id for employees.
   * @param fk Foreign key for employees
   * @param id Company id
   */
  public companyPrototypeFindByIdEmployees (fk: string, id: string, extraHttpRequestParams?: any): Observable<Employee> {
    return this.companyPrototypeFindByIdEmployeesWithHttpInfo(fk, id, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Find a related item by id for transactions.
   * @param fk Foreign key for transactions
   * @param id Company id
   */
  public companyPrototypeFindByIdTransactions (fk: string, id: string, extraHttpRequestParams?: any): Observable<Transaction> {
    return this.companyPrototypeFindByIdTransactionsWithHttpInfo(fk, id, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Queries employees of Company.
   * @param id Company id
   * @param filter
   */
  public companyPrototypeGetEmployees (id: string, filter?: string, extraHttpRequestParams?: any): Observable<Array<Employee>> {
    return this.companyPrototypeGetEmployeesWithHttpInfo(id, filter, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Queries transactions of Company.
   * @param id Company id
   * @param filter
   */
  public companyPrototypeGetTransactions (id: string, filter?: string, extraHttpRequestParams?: any): Observable<Array<Transaction>> {
    return this.companyPrototypeGetTransactionsWithHttpInfo(id, filter, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Patch attributes for a model instance and persist it into the data source.
   * @param id Company id
   * @param data An object of model property name/value pairs
   */
  public companyPrototypePatchAttributes (id: string, data?: Company, extraHttpRequestParams?: any): Observable<Company> {
    return this.companyPrototypePatchAttributesWithHttpInfo(id, data, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Update a related item by id for employees.
   * @param fk Foreign key for employees
   * @param id Company id
   * @param data
   */
  public companyPrototypeUpdateByIdEmployees (fk: string, id: string, data?: Employee, extraHttpRequestParams?: any): Observable<Employee> {
    return this.companyPrototypeUpdateByIdEmployeesWithHttpInfo(fk, id, data, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Update a related item by id for transactions.
   * @param fk Foreign key for transactions
   * @param id Company id
   * @param data
   */
  public companyPrototypeUpdateByIdTransactions (fk: string, id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Transaction> {
    return this.companyPrototypeUpdateByIdTransactionsWithHttpInfo(fk, id, data, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Replace attributes for a model instance and persist it into the data source.
   * @param id Model id
   * @param data Model instance data
   */
  public companyReplaceByIdPostCompaniesidReplace (id: string, data?: Company, extraHttpRequestParams?: any): Observable<Company> {
    return this.companyReplaceByIdPostCompaniesidReplaceWithHttpInfo(id, data, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Replace attributes for a model instance and persist it into the data source.
   * @param id Model id
   * @param data Model instance data
   */
  public companyReplaceByIdPutCompaniesid (id: string, data?: Company, extraHttpRequestParams?: any): Observable<Company> {
    return this.companyReplaceByIdPutCompaniesidWithHttpInfo(id, data, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Replace an existing model instance or insert a new one into the data source.
   * @param data Model instance data
   */
  public companyReplaceOrCreatePostCompaniesReplaceOrCreate (data?: Company, extraHttpRequestParams?: any): Observable<Company> {
    return this.companyReplaceOrCreatePostCompaniesReplaceOrCreateWithHttpInfo(data, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Replace an existing model instance or insert a new one into the data source.
   * @param data Model instance data
   */
  public companyReplaceOrCreatePutCompanies (data?: Company, extraHttpRequestParams?: any): Observable<Company> {
    return this.companyReplaceOrCreatePutCompaniesWithHttpInfo(data, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Update instances of the model matched by {{where}} from the data source.
   * @param where Criteria to match model instances
   * @param data An object of model property name/value pairs
   */
  public companyUpdateAll (where?: string, data?: Company, extraHttpRequestParams?: any): Observable<InlineResponse2002> {
    return this.companyUpdateAllWithHttpInfo(where, data, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   *
   * @summary Update an existing model instance or insert a new one into the data source based on the where criteria.
   * @param where Criteria to match model instances
   * @param data An object of model property name/value pairs
   */
  public companyUpsertWithWhere (where?: string, data?: Company, extraHttpRequestParams?: any): Observable<Company> {
    return this.companyUpsertWithWhereWithHttpInfo(where, data, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Count instances of the model matched by where from the data source.
   *
   * @param where Criteria to match model instances
   */
  public companyCountWithHttpInfo (where?: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/count';

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    if (where !== undefined) {
      queryParameters.set('where', <any>where);
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Create a new instance of the model and persist it into the data source.
   *
   * @param data Model instance data
   */
  public companyCreateWithHttpInfo (data?: Company, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies';

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Create a change stream.
   *
   * @param options
   */
  public companyCreateChangeStreamGetCompaniesChangeStreamWithHttpInfo (options?: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/change-stream';

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    if (options !== undefined) {
      queryParameters.set('options', <any>options);
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      responseType: ResponseContentType.Blob,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Create a change stream.
   *
   * @param options
   */
  public companyCreateChangeStreamPostCompaniesChangeStreamWithHttpInfo (options?: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/change-stream';

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // to determine the Content-Type header
    let consumes: string[] = [
      'application/json',
      'application/x-www-form-urlencoded',
      'application/xml',
      'text/xml'
    ];
    let canConsumeForm = this.canConsumeForm(consumes);
    let useForm = false;
    let formParams = new (useForm ? FormData : URLSearchParams as any)() as {
      set(param: string, value: any): void;
    };

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    if (options !== undefined) {
      formParams.set('options', <any>options);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      responseType: ResponseContentType.Blob,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Delete a model instance by {{id}} from the data source.
   *
   * @param id Model id
   */
  public companyDeleteByIdWithHttpInfo (id: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}'
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyDeleteById.');
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Check whether a model instance exists in the data source.
   *
   * @param id Model id
   */
  public companyExistsGetCompaniesidExistsWithHttpInfo (id: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}/exists'
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyExistsGetCompaniesidExists.');
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Check whether a model instance exists in the data source.
   *
   * @param id Model id
   */
  public companyExistsHeadCompaniesidWithHttpInfo (id: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}'
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyExistsHeadCompaniesid.');
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Head,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Find all instances of the model matched by filter from the data source.
   *
   * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;})
   */
  public companyFindWithHttpInfo (filter?: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies';

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    if (filter !== undefined) {
      queryParameters.set('filter', <any>filter);
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Find a model instance by {{id}} from the data source.
   *
   * @param id Model id
   * @param filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;})
   */
  public companyFindByIdWithHttpInfo (id: string, filter?: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}'
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyFindById.');
    }
    if (filter !== undefined) {
      queryParameters.set('filter', <any>filter);
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Find first instance of the model matched by filter from the data source.
   *
   * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;})
   */
  public companyFindOneWithHttpInfo (filter?: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/findOne';

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    if (filter !== undefined) {
      queryParameters.set('filter', <any>filter);
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Patch an existing model instance or insert a new one into the data source.
   *
   * @param data Model instance data
   */
  public companyPatchOrCreateWithHttpInfo (data?: Company, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies';

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Patch,
      headers: headers,
      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Counts employees of Company.
   *
   * @param id Company id
   * @param where Criteria to match model instances
   */
  public companyPrototypeCountEmployeesWithHttpInfo (id: string, where?: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}/employees/count'
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyPrototypeCountEmployees.');
    }
    if (where !== undefined) {
      queryParameters.set('where', <any>where);
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Counts transactions of Company.
   *
   * @param id Company id
   * @param where Criteria to match model instances
   */
  public companyPrototypeCountTransactionsWithHttpInfo (id: string, where?: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}/transactions/count'
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyPrototypeCountTransactions.');
    }
    if (where !== undefined) {
      queryParameters.set('where', <any>where);
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Creates a new instance in employees of this model.
   *
   * @param id Company id
   * @param data
   */
  public companyPrototypeCreateEmployeesWithHttpInfo (id: string, data?: Employee, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}/employees'
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyPrototypeCreateEmployees.');
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Creates a new instance in transactions of this model.
   *
   * @param id Company id
   * @param data
   */
  public companyPrototypeCreateTransactionsWithHttpInfo (id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}/transactions'
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyPrototypeCreateTransactions.');
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Deletes all employees of this model.
   *
   * @param id Company id
   */
  public companyPrototypeDeleteEmployeesWithHttpInfo (id: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}/employees'
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyPrototypeDeleteEmployees.');
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Deletes all transactions of this model.
   *
   * @param id Company id
   */
  public companyPrototypeDeleteTransactionsWithHttpInfo (id: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}/transactions'
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyPrototypeDeleteTransactions.');
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Delete a related item by id for employees.
   *
   * @param fk Foreign key for employees
   * @param id Company id
   */
  public companyPrototypeDestroyByIdEmployeesWithHttpInfo (fk: string, id: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}/employees/${fk}'
      .replace('${' + 'fk' + '}', String(fk))
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'fk' is not null or undefined
    if (fk === null || fk === undefined) {
      throw new Error('Required parameter fk was null or undefined when calling companyPrototypeDestroyByIdEmployees.');
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyPrototypeDestroyByIdEmployees.');
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Delete a related item by id for transactions.
   *
   * @param fk Foreign key for transactions
   * @param id Company id
   */
  public companyPrototypeDestroyByIdTransactionsWithHttpInfo (fk: string, id: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}/transactions/${fk}'
      .replace('${' + 'fk' + '}', String(fk))
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'fk' is not null or undefined
    if (fk === null || fk === undefined) {
      throw new Error('Required parameter fk was null or undefined when calling companyPrototypeDestroyByIdTransactions.');
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyPrototypeDestroyByIdTransactions.');
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Find a related item by id for employees.
   *
   * @param fk Foreign key for employees
   * @param id Company id
   */
  public companyPrototypeFindByIdEmployeesWithHttpInfo (fk: string, id: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}/employees/${fk}'
      .replace('${' + 'fk' + '}', String(fk))
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'fk' is not null or undefined
    if (fk === null || fk === undefined) {
      throw new Error('Required parameter fk was null or undefined when calling companyPrototypeFindByIdEmployees.');
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyPrototypeFindByIdEmployees.');
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Find a related item by id for transactions.
   *
   * @param fk Foreign key for transactions
   * @param id Company id
   */
  public companyPrototypeFindByIdTransactionsWithHttpInfo (fk: string, id: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}/transactions/${fk}'
      .replace('${' + 'fk' + '}', String(fk))
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'fk' is not null or undefined
    if (fk === null || fk === undefined) {
      throw new Error('Required parameter fk was null or undefined when calling companyPrototypeFindByIdTransactions.');
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyPrototypeFindByIdTransactions.');
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Queries employees of Company.
   *
   * @param id Company id
   * @param filter
   */
  public companyPrototypeGetEmployeesWithHttpInfo (id: string, filter?: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}/employees'
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyPrototypeGetEmployees.');
    }
    if (filter !== undefined) {
      queryParameters.set('filter', <any>filter);
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Queries transactions of Company.
   *
   * @param id Company id
   * @param filter
   */
  public companyPrototypeGetTransactionsWithHttpInfo (id: string, filter?: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}/transactions'
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyPrototypeGetTransactions.');
    }
    if (filter !== undefined) {
      queryParameters.set('filter', <any>filter);
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Patch attributes for a model instance and persist it into the data source.
   *
   * @param id Company id
   * @param data An object of model property name/value pairs
   */
  public companyPrototypePatchAttributesWithHttpInfo (id: string, data?: Company, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}'
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyPrototypePatchAttributes.');
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Patch,
      headers: headers,
      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Update a related item by id for employees.
   *
   * @param fk Foreign key for employees
   * @param id Company id
   * @param data
   */
  public companyPrototypeUpdateByIdEmployeesWithHttpInfo (fk: string, id: string, data?: Employee, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}/employees/${fk}'
      .replace('${' + 'fk' + '}', String(fk))
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'fk' is not null or undefined
    if (fk === null || fk === undefined) {
      throw new Error('Required parameter fk was null or undefined when calling companyPrototypeUpdateByIdEmployees.');
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyPrototypeUpdateByIdEmployees.');
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Update a related item by id for transactions.
   *
   * @param fk Foreign key for transactions
   * @param id Company id
   * @param data
   */
  public companyPrototypeUpdateByIdTransactionsWithHttpInfo (fk: string, id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}/transactions/${fk}'
      .replace('${' + 'fk' + '}', String(fk))
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'fk' is not null or undefined
    if (fk === null || fk === undefined) {
      throw new Error('Required parameter fk was null or undefined when calling companyPrototypeUpdateByIdTransactions.');
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyPrototypeUpdateByIdTransactions.');
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Replace attributes for a model instance and persist it into the data source.
   *
   * @param id Model id
   * @param data Model instance data
   */
  public companyReplaceByIdPostCompaniesidReplaceWithHttpInfo (id: string, data?: Company, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}/replace'
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyReplaceByIdPostCompaniesidReplace.');
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Replace attributes for a model instance and persist it into the data source.
   *
   * @param id Model id
   * @param data Model instance data
   */
  public companyReplaceByIdPutCompaniesidWithHttpInfo (id: string, data?: Company, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/${id}'
      .replace('${' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling companyReplaceByIdPutCompaniesid.');
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Replace an existing model instance or insert a new one into the data source.
   *
   * @param data Model instance data
   */
  public companyReplaceOrCreatePostCompaniesReplaceOrCreateWithHttpInfo (data?: Company, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/replaceOrCreate';

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Replace an existing model instance or insert a new one into the data source.
   *
   * @param data Model instance data
   */
  public companyReplaceOrCreatePutCompaniesWithHttpInfo (data?: Company, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies';

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Update instances of the model matched by {{where}} from the data source.
   *
   * @param where Criteria to match model instances
   * @param data An object of model property name/value pairs
   */
  public companyUpdateAllWithHttpInfo (where?: string, data?: Company, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/update';

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    if (where !== undefined) {
      queryParameters.set('where', <any>where);
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Update an existing model instance or insert a new one into the data source based on the where criteria.
   *
   * @param where Criteria to match model instances
   * @param data An object of model property name/value pairs
   */
  public companyUpsertWithWhereWithHttpInfo (where?: string, data?: Company, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/Companies/upsertWithWhere';

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    if (where !== undefined) {
      queryParameters.set('where', <any>where);
    }

    // to determine the Accept header
    let produces: string[] = [
      'application/json',
      'application/xml',
      'text/xml',
      'application/javascript',
      'text/javascript'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

}
