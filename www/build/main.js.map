{"version":3,"sources":["../../src/features/dashboard/dashboard.component.ts","../../src/features/payment/payment.component.ts","../../src/swagger/api/company.service.ts","../../src/swagger/api/entity.service.ts","../../src/swagger/api/entityType.service.ts","../../src/swagger/api/transaction.service.ts","../../src/swagger/api/transactionType.service.ts","../../src/swagger/api/user.service.ts","../../node_modules/@angular/core/@angular lazy","../../src lazy","../../src/swagger/configuration.ts","../../src/features/menu/menu.ts","../../src/features/welcome/welcome.ts","../../src/app/main.ts","../../src/app/app.module.ts","../../src/swagger/rxjs-operators.ts","../../src/env/environment.ts","../../node_modules/moment/locale ^/.//.*$","../../src/app/app.component.ts","../../src/widgets/widgets.module.ts","../../src/widgets/bg-color.directive.ts","../../src/widgets/pages/servererror.component.ts","../../src/widgets/pages/methodnotallowed.component.ts","../../src/widgets/pages/pagenotfound.component.ts","../../src/widgets/pages/unauthorized.component.ts","../../src/swagger/index.ts","../../src/swagger/api/api.ts","../../src/swagger/variables.ts","../../src/swagger/api.module.ts","../../src/features/login/login.ts","../../src/features/signup/signup.ts","../../src/swagger/api/employee.service.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dash',\n  templateUrl: './dashboard.template.html'\n})\nexport class DashboardComponent implements OnInit {\n  title = 'Sample Dashboard';\n\n  public barChartOptions: any = {\n    scaleShowVerticalLines: false,\n    responsive: true\n  };\n  public barChartLabels: string[] = ['Q1 2016', 'Q2 2016', 'Q3 2016', 'Q4 2016', 'Q1 2017', 'Q2 2017'];\n  public barChartType = 'bar';\n  public barChartLegend = true;\n\n  public barChartData: any[] = [\n    { data: [], label: 'Hamburger Sales' },\n    { data: [], label: 'Hot Dog Sales' }\n  ];\n\n  public barChartData0: any[] = [\n    { data: [59, 80, 81, 56, 55, 40], label: 'Hamburger Sales' },\n    { data: [48, 40, 19, 86, 27, 90], label: 'Hot Dog Sales' }\n  ];\n  public barChartData1: any[] = [\n    { data: [65, 75, 60, 45, 48, 57], label: 'Hamburger Sales' },\n    { data: [52, 38, 40, 71, 42, 78], label: 'Hot Dog Sales' }\n  ];\n  public barChartData2: any[] = [\n    { data: [71, 65, 70, 75, 40, 80], label: 'Hamburger Sales' },\n    { data: [78, 68, 40, 65, 52, 75], label: 'Hot Dog Sales' }\n  ];\n  public barSeries = 1;\n  private partial = '45,125,210';\n  public barChartColors = [\n    {\n      backgroundColor: [`rgba(${this.partial},0.6)`, `rgba(${this.partial},0.6)`, `rgba(${this.partial},0.6)`, `rgba(${this.partial},0.6)`, `rgba(${this.partial},0.6)`, `rgba(${this.partial},0.6)`],\n      borderColor: [`rgba(${this.partial},0.9)`, `rgba(${this.partial},0.9)`, `rgba(${this.partial},0.9)`, `rgba(${this.partial},0.9)`, `rgba(${this.partial},0.9)`, `rgba(${this.partial},0.9)`],\n      hoverBackgroundColor: [`rgba(${this.partial},0.7)`, `rgba(${this.partial},0.7)`, `rgba(${this.partial},0.7)`, `rgba(${this.partial},0.7)`, `rgba(${this.partial},0.7)`, `rgba(${this.partial},0.7)`],\n      hoverBorderColor: [`rgba(${this.partial},0.9)`, `rgba(${this.partial},0.9)`, `rgba(${this.partial},0.9)`, `rgba(${this.partial},0.9)`, `rgba(${this.partial},0.9)`, `rgba(${this.partial},0.9)`]\n    },\n    { // dark grey\n      backgroundColor: ['rgba(55,59,109,0.6)', 'rgba(55,59,109,0.6)', 'rgba(55,59,109,0.6)', 'rgba(55,59,109,0.6)', 'rgba(55,59,109,0.6)', 'rgba(55,59,109,0.6)'],\n      borderColor: ['rgba(55,59,109,0.9)', 'rgba(55,59,109,0.9)', 'rgba(55,59,109,0.9)', 'rgba(55,59,109,0.9)', 'rgba(55,59,109,0.9)', 'rgba(55,59,109,0.9)', 'rgba(55,59,109,0.9)'],\n      hoverBackgroundColor: ['rgba(55,59,109,0.7)', 'rgba(55,59,109,0.7)', 'rgba(55,59,109,0.7)', 'rgba(55,59,109,0.7)', 'rgba(55,59,109,0.7)', 'rgba(55,59,109,0.7)'],\n      hoverBorderColor: ['rgba(55,59,109,0.9)', 'rgba(55,59,109,0.9)', 'rgba(55,59,109,0.9)', 'rgba(55,59,109,0.9)', 'rgba(55,59,109,0.9)', 'rgba(55,59,109,0.9)', 'rgba(55,59,109,0.9)']\n    }\n  ];\n  public doughnutChartLabels: string[] = ['Credit Card', 'ACH Debit', 'Bitcoin', 'Apple Pay'];\n  public doughnutChartData: number[] = [];\n  public doughnutChartData0: number[] = [220, 12, 64, 45];\n  public doughnutChartData1: number[] = [180, 48, 100, 120];\n  public doughnutChartData2: number[] = [150, 52, 36, 38];\n  public doughSeries = 1;\n  public doughnutChartType = 'doughnut';\n  public doughnutChartColors = [\n    { // grey\n      backgroundColor: ['rgba(179,186,189,0.6)', 'rgba(49,54,56,0.6)', 'rgba(76,84,87,0.6)', 'rgba(114,126,131,0.6)', 'rgba(28,32,33,0.6)'],\n      borderColor: ['rgba(255,255,255,0.3)', 'rgba(255,255,255,0.3)', 'rgba(255,255,255,0.3)', 'rgba(255,255,255,0.3)', 'rgba(255,255,255,0.3)', 'rgba(207,79,156,0.3)'],\n      hoverBackgroundColor: ['rgba(179,186,189,0.9)', 'rgba(49,54,56,0.9)', 'rgba(76,84,87,0.9)', 'rgba(114,126,131,0.9)', 'rgba(28,32,33,0.9)'],\n      hoverBorderColor: ['rgba(255,255,255,0.3)', 'rgba(255,255,255,0.3)', 'rgba(255,255,255,0.3)', 'rgba(255,255,255,0.3)', 'rgba(255,255,255,0.3)', 'rgba(255,255,255,0.3)']\n    }\n  ];\n  public lineChartData: Array<any> = [\n    { data: [65, 59, 80, 81, 56, 55, 40], label: 'Utilities' },\n    { data: [28, 48, 40, 19, 86, 27, 90], label: 'Payroll' },\n    { data: [18, 48, 77, 9, 100, 27, 40], label: 'Food Cost' }\n  ];\n  public lineChartLabels: Array<any> = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n  public lineChartOptions: any = {\n    responsive: true,\n    series: {\n      0: {\n        color: 'rgba(55,34,72,1)'\n      },\n      1: {\n        color: 'rgba(68,53,91,1)'\n      },\n      2: {\n        color: 'rgba(61,43,61,1)'\n      }\n    }\n  };\n  public lineChartColors: Array<any> = [\n    { // grey\n      backgroundColor: 'rgba(55,34,72,0.2)',\n      borderColor: 'rgba(55,34,72,1)',\n      pointBackgroundColor: 'rgba(55,34,72,1)',\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: 'rgba(55,34,72,0.8)'\n    },\n    { // dark grey\n      backgroundColor: 'rgba(68,53,91,0.2)',\n      borderColor: 'rgba(68,53,91,1)',\n      pointBackgroundColor: 'rgba(68,53,91,1)',\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: 'rgba(68,53,91,1)'\n    },\n    { // grey\n      backgroundColor: 'rgba(61,43,61,0.2)',\n      borderColor: 'rgba(61,43,61,1)',\n      pointBackgroundColor: 'rgba(61,43,61,1)',\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: 'rgba(61,43,61,0.8)'\n    }\n  ];\n  public lineChartLegend: boolean = true;\n  public lineChartType: string = 'line';\n\n  public randomize (): void {\n    let _lineChartData: Array<any> = new Array(this.lineChartData.length);\n    for (let i = 0; i < this.lineChartData.length; i++) {\n      _lineChartData[i] = { data: new Array(this.lineChartData[i].data.length), label: this.lineChartData[i].label };\n      for (let j = 0; j < this.lineChartData[i].data.length; j++) {\n        _lineChartData[i].data[j] = Math.floor((Math.random() * 100) + 1);\n      }\n    }\n    this.lineChartData = _lineChartData;\n  }\n\n  public chartClicked (e: any): void {\n    console.log(e);\n  }\n\n  public chartHovered (e: any): void {\n    console.log(e);\n  }\n\n  public updatePieChart () {\n    switch(this.doughSeries) {\n      case 0:\n      console.log('zero');\n        this.doughSeries++;\n        return this.doughnutChartData = this.doughnutChartData0;\n      case 1:\n        this.doughSeries++;\n        return this.doughnutChartData = this.doughnutChartData1;\n      case 2:\n        this.doughSeries = 0;\n        return this.doughnutChartData = this.doughnutChartData2;\n      default:\n        return this.doughnutChartData = this.doughnutChartData0;\n    }\n\n  }\n\n  public updateBarChart () {\n    switch (this.barSeries) {\n      case 0:\n        console.log('zero');\n        this.barSeries++;\n        return this.barChartData = this.barChartData0;\n      case 1:\n        this.barSeries++;\n        return this.barChartData = this.barChartData1;\n      case 2:\n        this.barSeries = 0;\n        return this.barChartData = this.barChartData2;\n      default:\n        return this.barChartData = this.barChartData0;\n    }\n\n  }\n\n  ngOnInit() {\n    Object.assign(this.barChartData, this.barChartData0);\n    Object.assign(this.doughnutChartData, this.doughnutChartData0);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/features/dashboard/dashboard.component.ts","import { AfterContentInit, AfterViewChecked, AfterViewInit, Component, ElementRef, OnInit } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Http, RequestOptions, Headers } from '@angular/http';\n\nexport interface Font {\n  family?: string | object;\n  src?: string;\n  style?: string;\n  unicodeRange?: string;\n  weight?: string | number;\n}\nexport interface ElementOptions {\n  fonts?: [Font];\n  locale?: string;\n}\n\nexport interface TokenOptions {\n  name?: string;\n  address_line1?: string;\n  address_line2?: string;\n  address_city?: string;\n  address_state?: string;\n  address_zip?: string;\n  address_country?: string;\n  currency?: any;\n}\n\nexport interface Card {\n  id: string;\n  object: string;\n  address_city: string;\n  address_country: string;\n  address_line1: string;\n  address_line1_check: string;\n  address_line2: string;\n  address_state: string;\n  address_zip: string;\n  address_zip_check: string;\n  brand: string;\n  country: string;\n  cvc_check: string;\n  dynamic_last4: string;\n  exp_month: number;\n  exp_year: number;\n  fingerprint: string;\n  funding: string;\n  last4: string;\n  metadata: object;\n  name: string;\n  tokenization_method: string;\n}\nexport interface Token {\n  id?: string;\n  object?: string;\n  bank_account?: object;\n  card?: Card;\n  client_ip?: string;\n  created?: Date;\n  livemode?: boolean;\n  type?: string;\n  used?: boolean;\n}\nexport interface Result {\n  token?: Token;\n  error?: Error;\n}\nexport interface Stripe {\n  elements(options?: ElementOptions): Elements;\n  createToken(element: Elements, options: TokenOptions[]): Promise<Result>;\n  (secret: string): void;\n}\n\ndeclare const Stripe: Stripe;\n\nexport interface Types {\n  card: any;\n  cardNumber?: any;\n  cardExpiry?: any;\n  cardCvc?: any;\n  postalCode?: any;\n}\n\nexport interface CreateOptions {\n  classes?: any;\n  hidePostalCode?: boolean;\n  hideIcon?: boolean;\n  iconStyle?: string;\n  style?: object;\n  value?: any;\n}\n\nexport interface Elements {\n  create(type: Types, options?: CreateOptions[]);\n  mount(domElement);\n  on(event: Event, handler);\n  blur();\n  clear();\n  focus();\n  unmount();\n  update(options?: CreateOptions[]);\n}\n\n@Component({\n  selector: 'app-payment',\n  templateUrl: './payment.template.html'\n})\nexport class PaymentComponent implements OnInit {\n  private cardToken: any;\n  public title = 'Make a Payment';\n  public stripe: any;\n  public elements: any;\n  public card: any;\n  public formCard = {\n    number: null,\n    exp_month: null,\n    exp_year: null,\n    cvc: null\n  };\n  public http: Http;\n  public diag;\n  public diag2;\n  constructor(private _http: Http) {\n    this.http = _http;\n  }\n\n  ngOnInit () {\n\n\n  }\n\n  makePayment() {\n\n  }\n\n  createToken() {\n    const headers = new Headers({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': 'Bearer pk_test_HYN4uPqYEk3NruqHTj6jemDw'\n     });\n    const options = new RequestOptions({ headers: headers });\n    const expire = this.formCard.exp_month.split(' / ');\n    this.formCard.exp_month = expire[0];\n    this.formCard.exp_year = expire[1];\n    const cc = this.formCard.number.split(' ');\n    this.formCard.number = cc[0].concat(cc[1]).concat(cc[2]).concat(cc[3]);\n    this.diag2 = JSON.stringify(this.formCard);\n    const path = 'card[number]=' + this.formCard.number + '&card[cvc]=' + this.formCard.cvc + '&card[exp_month]=' + this.formCard.exp_month + '&card[exp_year]=' + this.formCard.exp_year + '&key=pk_test_HYN4uPqYEk3NruqHTj6jemDw';\n    return this.http.post('https://api.stripe.com/v1/tokens?' + path, null, options).subscribe((res) => {\n      const body = res.json();\n      this.diag = JSON.stringify(body);\n      console.log(body);\n    });\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/features/payment/payment.component.ts","/**\n * bt-server\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.0.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { Http, Headers, URLSearchParams } from '@angular/http';\nimport { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';\nimport { Response, ResponseContentType } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport '../rxjs-operators';\n\nimport { Company } from '../model/company';\nimport { Employee } from '../model/employee';\nimport { InlineResponse200 } from '../model/inlineResponse200';\nimport { InlineResponse2001 } from '../model/inlineResponse2001';\nimport { InlineResponse2002 } from '../model/inlineResponse2002';\nimport { Transaction } from '../model/transaction';\n\nimport { COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\nimport { BASE_PATH } from '../../env/environment';\n\n@Injectable()\nexport class CompanyService {\n\n  protected basePath = 'https://localhost/api';\n  public defaultHeaders: Headers = new Headers();\n  public configuration: Configuration = new Configuration();\n\n  constructor (protected http: Http, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n    if (basePath) {\n      this.basePath = basePath;\n    }\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = basePath || configuration.basePath || this.basePath;\n    }\n  }\n\n  /**\n   *\n   * Extends object by coping non-existing properties.\n   * @param objA object to be extended\n   * @param objB source object\n   */\n  private extendObj<T1, T2> (objA: T1, objB: T2) {\n    for (let key in objB) {\n      if (objB.hasOwnProperty(key)) {\n        (objA as any)[key] = (objB as any)[key];\n      }\n    }\n    return <T1 & T2>objA;\n  }\n\n  /**\n   * @param consumes string[] mime-types\n   * @return true: consumes contains 'multipart/form-data', false: otherwise\n   */\n  private canConsumeForm (consumes: string[]): boolean {\n    const form = 'multipart/form-data';\n    for (let consume of consumes) {\n      if (form === consume) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   *\n   * @summary Count instances of the model matched by where from the data source.\n   * @param where Criteria to match model instances\n   */\n  public companyCount (where?: string, extraHttpRequestParams?: any): Observable<InlineResponse200> {\n    return this.companyCountWithHttpInfo(where, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Create a new instance of the model and persist it into the data source.\n   * @param data Model instance data\n   */\n  public companyCreate (data?: Company, extraHttpRequestParams?: any): Observable<Company> {\n    return this.companyCreateWithHttpInfo(data, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Create a change stream.\n   * @param options\n   */\n  public companyCreateChangeStreamGetCompaniesChangeStream (options?: string, extraHttpRequestParams?: any): Observable<Blob | undefined> {\n    return this.companyCreateChangeStreamGetCompaniesChangeStreamWithHttpInfo(options, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.blob();\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Create a change stream.\n   * @param options\n   */\n  public companyCreateChangeStreamPostCompaniesChangeStream (options?: string, extraHttpRequestParams?: any): Observable<Blob | undefined> {\n    return this.companyCreateChangeStreamPostCompaniesChangeStreamWithHttpInfo(options, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.blob();\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Delete a model instance by {{id}} from the data source.\n   * @param id Model id\n   */\n  public companyDeleteById (id: string, extraHttpRequestParams?: any): Observable<any> {\n    return this.companyDeleteByIdWithHttpInfo(id, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Check whether a model instance exists in the data source.\n   * @param id Model id\n   */\n  public companyExistsGetCompaniesidExists (id: string, extraHttpRequestParams?: any): Observable<InlineResponse2001> {\n    return this.companyExistsGetCompaniesidExistsWithHttpInfo(id, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Check whether a model instance exists in the data source.\n   * @param id Model id\n   */\n  public companyExistsHeadCompaniesid (id: string, extraHttpRequestParams?: any): Observable<InlineResponse2001> {\n    return this.companyExistsHeadCompaniesidWithHttpInfo(id, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Find all instances of the model matched by filter from the data source.\n   * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n   */\n  public companyFind (filter?: string, extraHttpRequestParams?: any): Observable<Array<Company>> {\n    return this.companyFindWithHttpInfo(filter, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Find a model instance by {{id}} from the data source.\n   * @param id Model id\n   * @param filter Filter defining fields and include - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n   */\n  public companyFindById (id: string, filter?: string, extraHttpRequestParams?: any): Observable<Company> {\n    return this.companyFindByIdWithHttpInfo(id, filter, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Find first instance of the model matched by filter from the data source.\n   * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n   */\n  public companyFindOne (filter?: string, extraHttpRequestParams?: any): Observable<Company> {\n    return this.companyFindOneWithHttpInfo(filter, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Patch an existing model instance or insert a new one into the data source.\n   * @param data Model instance data\n   */\n  public companyPatchOrCreate (data?: Company, extraHttpRequestParams?: any): Observable<Company> {\n    return this.companyPatchOrCreateWithHttpInfo(data, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Counts employees of Company.\n   * @param id Company id\n   * @param where Criteria to match model instances\n   */\n  public companyPrototypeCountEmployees (id: string, where?: string, extraHttpRequestParams?: any): Observable<InlineResponse200> {\n    return this.companyPrototypeCountEmployeesWithHttpInfo(id, where, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Counts transactions of Company.\n   * @param id Company id\n   * @param where Criteria to match model instances\n   */\n  public companyPrototypeCountTransactions (id: string, where?: string, extraHttpRequestParams?: any): Observable<InlineResponse200> {\n    return this.companyPrototypeCountTransactionsWithHttpInfo(id, where, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Creates a new instance in employees of this model.\n   * @param id Company id\n   * @param data\n   */\n  public companyPrototypeCreateEmployees (id: string, data?: Employee, extraHttpRequestParams?: any): Observable<Employee> {\n    return this.companyPrototypeCreateEmployeesWithHttpInfo(id, data, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Creates a new instance in transactions of this model.\n   * @param id Company id\n   * @param data\n   */\n  public companyPrototypeCreateTransactions (id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Transaction> {\n    return this.companyPrototypeCreateTransactionsWithHttpInfo(id, data, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Deletes all employees of this model.\n   * @param id Company id\n   */\n  public companyPrototypeDeleteEmployees (id: string, extraHttpRequestParams?: any): Observable<{}> {\n    return this.companyPrototypeDeleteEmployeesWithHttpInfo(id, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Deletes all transactions of this model.\n   * @param id Company id\n   */\n  public companyPrototypeDeleteTransactions (id: string, extraHttpRequestParams?: any): Observable<{}> {\n    return this.companyPrototypeDeleteTransactionsWithHttpInfo(id, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Delete a related item by id for employees.\n   * @param fk Foreign key for employees\n   * @param id Company id\n   */\n  public companyPrototypeDestroyByIdEmployees (fk: string, id: string, extraHttpRequestParams?: any): Observable<{}> {\n    return this.companyPrototypeDestroyByIdEmployeesWithHttpInfo(fk, id, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Delete a related item by id for transactions.\n   * @param fk Foreign key for transactions\n   * @param id Company id\n   */\n  public companyPrototypeDestroyByIdTransactions (fk: string, id: string, extraHttpRequestParams?: any): Observable<{}> {\n    return this.companyPrototypeDestroyByIdTransactionsWithHttpInfo(fk, id, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Find a related item by id for employees.\n   * @param fk Foreign key for employees\n   * @param id Company id\n   */\n  public companyPrototypeFindByIdEmployees (fk: string, id: string, extraHttpRequestParams?: any): Observable<Employee> {\n    return this.companyPrototypeFindByIdEmployeesWithHttpInfo(fk, id, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Find a related item by id for transactions.\n   * @param fk Foreign key for transactions\n   * @param id Company id\n   */\n  public companyPrototypeFindByIdTransactions (fk: string, id: string, extraHttpRequestParams?: any): Observable<Transaction> {\n    return this.companyPrototypeFindByIdTransactionsWithHttpInfo(fk, id, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Queries employees of Company.\n   * @param id Company id\n   * @param filter\n   */\n  public companyPrototypeGetEmployees (id: string, filter?: string, extraHttpRequestParams?: any): Observable<Array<Employee>> {\n    return this.companyPrototypeGetEmployeesWithHttpInfo(id, filter, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Queries transactions of Company.\n   * @param id Company id\n   * @param filter\n   */\n  public companyPrototypeGetTransactions (id: string, filter?: string, extraHttpRequestParams?: any): Observable<Array<Transaction>> {\n    return this.companyPrototypeGetTransactionsWithHttpInfo(id, filter, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Patch attributes for a model instance and persist it into the data source.\n   * @param id Company id\n   * @param data An object of model property name/value pairs\n   */\n  public companyPrototypePatchAttributes (id: string, data?: Company, extraHttpRequestParams?: any): Observable<Company> {\n    return this.companyPrototypePatchAttributesWithHttpInfo(id, data, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Update a related item by id for employees.\n   * @param fk Foreign key for employees\n   * @param id Company id\n   * @param data\n   */\n  public companyPrototypeUpdateByIdEmployees (fk: string, id: string, data?: Employee, extraHttpRequestParams?: any): Observable<Employee> {\n    return this.companyPrototypeUpdateByIdEmployeesWithHttpInfo(fk, id, data, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Update a related item by id for transactions.\n   * @param fk Foreign key for transactions\n   * @param id Company id\n   * @param data\n   */\n  public companyPrototypeUpdateByIdTransactions (fk: string, id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Transaction> {\n    return this.companyPrototypeUpdateByIdTransactionsWithHttpInfo(fk, id, data, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Replace attributes for a model instance and persist it into the data source.\n   * @param id Model id\n   * @param data Model instance data\n   */\n  public companyReplaceByIdPostCompaniesidReplace (id: string, data?: Company, extraHttpRequestParams?: any): Observable<Company> {\n    return this.companyReplaceByIdPostCompaniesidReplaceWithHttpInfo(id, data, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Replace attributes for a model instance and persist it into the data source.\n   * @param id Model id\n   * @param data Model instance data\n   */\n  public companyReplaceByIdPutCompaniesid (id: string, data?: Company, extraHttpRequestParams?: any): Observable<Company> {\n    return this.companyReplaceByIdPutCompaniesidWithHttpInfo(id, data, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Replace an existing model instance or insert a new one into the data source.\n   * @param data Model instance data\n   */\n  public companyReplaceOrCreatePostCompaniesReplaceOrCreate (data?: Company, extraHttpRequestParams?: any): Observable<Company> {\n    return this.companyReplaceOrCreatePostCompaniesReplaceOrCreateWithHttpInfo(data, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Replace an existing model instance or insert a new one into the data source.\n   * @param data Model instance data\n   */\n  public companyReplaceOrCreatePutCompanies (data?: Company, extraHttpRequestParams?: any): Observable<Company> {\n    return this.companyReplaceOrCreatePutCompaniesWithHttpInfo(data, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Update instances of the model matched by {{where}} from the data source.\n   * @param where Criteria to match model instances\n   * @param data An object of model property name/value pairs\n   */\n  public companyUpdateAll (where?: string, data?: Company, extraHttpRequestParams?: any): Observable<InlineResponse2002> {\n    return this.companyUpdateAllWithHttpInfo(where, data, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   *\n   * @summary Update an existing model instance or insert a new one into the data source based on the where criteria.\n   * @param where Criteria to match model instances\n   * @param data An object of model property name/value pairs\n   */\n  public companyUpsertWithWhere (where?: string, data?: Company, extraHttpRequestParams?: any): Observable<Company> {\n    return this.companyUpsertWithWhereWithHttpInfo(where, data, extraHttpRequestParams)\n      .map((response: Response) => {\n        if (response.status === 204) {\n          return undefined;\n        } else {\n          return response.json() || {};\n        }\n      });\n  }\n\n  /**\n   * Count instances of the model matched by where from the data source.\n   *\n   * @param where Criteria to match model instances\n   */\n  public companyCountWithHttpInfo (where?: string, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/count';\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    if (where !== undefined) {\n      queryParameters.set('where', <any>where);\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Get,\n      headers: headers,\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Create a new instance of the model and persist it into the data source.\n   *\n   * @param data Model instance data\n   */\n  public companyCreateWithHttpInfo (data?: Company, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies';\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    headers.set('Content-Type', 'application/json');\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Post,\n      headers: headers,\n      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Create a change stream.\n   *\n   * @param options\n   */\n  public companyCreateChangeStreamGetCompaniesChangeStreamWithHttpInfo (options?: string, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/change-stream';\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    if (options !== undefined) {\n      queryParameters.set('options', <any>options);\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Get,\n      headers: headers,\n      responseType: ResponseContentType.Blob,\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Create a change stream.\n   *\n   * @param options\n   */\n  public companyCreateChangeStreamPostCompaniesChangeStreamWithHttpInfo (options?: string, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/change-stream';\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // to determine the Content-Type header\n    let consumes: string[] = [\n      'application/json',\n      'application/x-www-form-urlencoded',\n      'application/xml',\n      'text/xml'\n    ];\n    let canConsumeForm = this.canConsumeForm(consumes);\n    let useForm = false;\n    let formParams = new (useForm ? FormData : URLSearchParams as any)() as {\n      set(param: string, value: any): void;\n    };\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    if (options !== undefined) {\n      formParams.set('options', <any>options);\n    }\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Post,\n      headers: headers,\n      body: formParams.toString(),\n      responseType: ResponseContentType.Blob,\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Delete a model instance by {{id}} from the data source.\n   *\n   * @param id Model id\n   */\n  public companyDeleteByIdWithHttpInfo (id: string, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}'\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyDeleteById.');\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Delete,\n      headers: headers,\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Check whether a model instance exists in the data source.\n   *\n   * @param id Model id\n   */\n  public companyExistsGetCompaniesidExistsWithHttpInfo (id: string, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}/exists'\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyExistsGetCompaniesidExists.');\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Get,\n      headers: headers,\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Check whether a model instance exists in the data source.\n   *\n   * @param id Model id\n   */\n  public companyExistsHeadCompaniesidWithHttpInfo (id: string, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}'\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyExistsHeadCompaniesid.');\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Head,\n      headers: headers,\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Find all instances of the model matched by filter from the data source.\n   *\n   * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n   */\n  public companyFindWithHttpInfo (filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies';\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    if (filter !== undefined) {\n      queryParameters.set('filter', <any>filter);\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Get,\n      headers: headers,\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Find a model instance by {{id}} from the data source.\n   *\n   * @param id Model id\n   * @param filter Filter defining fields and include - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n   */\n  public companyFindByIdWithHttpInfo (id: string, filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}'\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyFindById.');\n    }\n    if (filter !== undefined) {\n      queryParameters.set('filter', <any>filter);\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Get,\n      headers: headers,\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Find first instance of the model matched by filter from the data source.\n   *\n   * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n   */\n  public companyFindOneWithHttpInfo (filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/findOne';\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    if (filter !== undefined) {\n      queryParameters.set('filter', <any>filter);\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Get,\n      headers: headers,\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Patch an existing model instance or insert a new one into the data source.\n   *\n   * @param data Model instance data\n   */\n  public companyPatchOrCreateWithHttpInfo (data?: Company, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies';\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    headers.set('Content-Type', 'application/json');\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Patch,\n      headers: headers,\n      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Counts employees of Company.\n   *\n   * @param id Company id\n   * @param where Criteria to match model instances\n   */\n  public companyPrototypeCountEmployeesWithHttpInfo (id: string, where?: string, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}/employees/count'\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyPrototypeCountEmployees.');\n    }\n    if (where !== undefined) {\n      queryParameters.set('where', <any>where);\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Get,\n      headers: headers,\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Counts transactions of Company.\n   *\n   * @param id Company id\n   * @param where Criteria to match model instances\n   */\n  public companyPrototypeCountTransactionsWithHttpInfo (id: string, where?: string, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}/transactions/count'\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyPrototypeCountTransactions.');\n    }\n    if (where !== undefined) {\n      queryParameters.set('where', <any>where);\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Get,\n      headers: headers,\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Creates a new instance in employees of this model.\n   *\n   * @param id Company id\n   * @param data\n   */\n  public companyPrototypeCreateEmployeesWithHttpInfo (id: string, data?: Employee, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}/employees'\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyPrototypeCreateEmployees.');\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    headers.set('Content-Type', 'application/json');\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Post,\n      headers: headers,\n      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Creates a new instance in transactions of this model.\n   *\n   * @param id Company id\n   * @param data\n   */\n  public companyPrototypeCreateTransactionsWithHttpInfo (id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}/transactions'\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyPrototypeCreateTransactions.');\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    headers.set('Content-Type', 'application/json');\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Post,\n      headers: headers,\n      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Deletes all employees of this model.\n   *\n   * @param id Company id\n   */\n  public companyPrototypeDeleteEmployeesWithHttpInfo (id: string, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}/employees'\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyPrototypeDeleteEmployees.');\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Delete,\n      headers: headers,\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Deletes all transactions of this model.\n   *\n   * @param id Company id\n   */\n  public companyPrototypeDeleteTransactionsWithHttpInfo (id: string, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}/transactions'\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyPrototypeDeleteTransactions.');\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Delete,\n      headers: headers,\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Delete a related item by id for employees.\n   *\n   * @param fk Foreign key for employees\n   * @param id Company id\n   */\n  public companyPrototypeDestroyByIdEmployeesWithHttpInfo (fk: string, id: string, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}/employees/${fk}'\n      .replace('${' + 'fk' + '}', String(fk))\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'fk' is not null or undefined\n    if (fk === null || fk === undefined) {\n      throw new Error('Required parameter fk was null or undefined when calling companyPrototypeDestroyByIdEmployees.');\n    }\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyPrototypeDestroyByIdEmployees.');\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Delete,\n      headers: headers,\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Delete a related item by id for transactions.\n   *\n   * @param fk Foreign key for transactions\n   * @param id Company id\n   */\n  public companyPrototypeDestroyByIdTransactionsWithHttpInfo (fk: string, id: string, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}/transactions/${fk}'\n      .replace('${' + 'fk' + '}', String(fk))\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'fk' is not null or undefined\n    if (fk === null || fk === undefined) {\n      throw new Error('Required parameter fk was null or undefined when calling companyPrototypeDestroyByIdTransactions.');\n    }\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyPrototypeDestroyByIdTransactions.');\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Delete,\n      headers: headers,\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Find a related item by id for employees.\n   *\n   * @param fk Foreign key for employees\n   * @param id Company id\n   */\n  public companyPrototypeFindByIdEmployeesWithHttpInfo (fk: string, id: string, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}/employees/${fk}'\n      .replace('${' + 'fk' + '}', String(fk))\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'fk' is not null or undefined\n    if (fk === null || fk === undefined) {\n      throw new Error('Required parameter fk was null or undefined when calling companyPrototypeFindByIdEmployees.');\n    }\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyPrototypeFindByIdEmployees.');\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Get,\n      headers: headers,\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Find a related item by id for transactions.\n   *\n   * @param fk Foreign key for transactions\n   * @param id Company id\n   */\n  public companyPrototypeFindByIdTransactionsWithHttpInfo (fk: string, id: string, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}/transactions/${fk}'\n      .replace('${' + 'fk' + '}', String(fk))\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'fk' is not null or undefined\n    if (fk === null || fk === undefined) {\n      throw new Error('Required parameter fk was null or undefined when calling companyPrototypeFindByIdTransactions.');\n    }\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyPrototypeFindByIdTransactions.');\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Get,\n      headers: headers,\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Queries employees of Company.\n   *\n   * @param id Company id\n   * @param filter\n   */\n  public companyPrototypeGetEmployeesWithHttpInfo (id: string, filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}/employees'\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyPrototypeGetEmployees.');\n    }\n    if (filter !== undefined) {\n      queryParameters.set('filter', <any>filter);\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Get,\n      headers: headers,\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Queries transactions of Company.\n   *\n   * @param id Company id\n   * @param filter\n   */\n  public companyPrototypeGetTransactionsWithHttpInfo (id: string, filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}/transactions'\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyPrototypeGetTransactions.');\n    }\n    if (filter !== undefined) {\n      queryParameters.set('filter', <any>filter);\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Get,\n      headers: headers,\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Patch attributes for a model instance and persist it into the data source.\n   *\n   * @param id Company id\n   * @param data An object of model property name/value pairs\n   */\n  public companyPrototypePatchAttributesWithHttpInfo (id: string, data?: Company, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}'\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyPrototypePatchAttributes.');\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    headers.set('Content-Type', 'application/json');\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Patch,\n      headers: headers,\n      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Update a related item by id for employees.\n   *\n   * @param fk Foreign key for employees\n   * @param id Company id\n   * @param data\n   */\n  public companyPrototypeUpdateByIdEmployeesWithHttpInfo (fk: string, id: string, data?: Employee, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}/employees/${fk}'\n      .replace('${' + 'fk' + '}', String(fk))\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'fk' is not null or undefined\n    if (fk === null || fk === undefined) {\n      throw new Error('Required parameter fk was null or undefined when calling companyPrototypeUpdateByIdEmployees.');\n    }\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyPrototypeUpdateByIdEmployees.');\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    headers.set('Content-Type', 'application/json');\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Put,\n      headers: headers,\n      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Update a related item by id for transactions.\n   *\n   * @param fk Foreign key for transactions\n   * @param id Company id\n   * @param data\n   */\n  public companyPrototypeUpdateByIdTransactionsWithHttpInfo (fk: string, id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}/transactions/${fk}'\n      .replace('${' + 'fk' + '}', String(fk))\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'fk' is not null or undefined\n    if (fk === null || fk === undefined) {\n      throw new Error('Required parameter fk was null or undefined when calling companyPrototypeUpdateByIdTransactions.');\n    }\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyPrototypeUpdateByIdTransactions.');\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    headers.set('Content-Type', 'application/json');\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Put,\n      headers: headers,\n      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Replace attributes for a model instance and persist it into the data source.\n   *\n   * @param id Model id\n   * @param data Model instance data\n   */\n  public companyReplaceByIdPostCompaniesidReplaceWithHttpInfo (id: string, data?: Company, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}/replace'\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyReplaceByIdPostCompaniesidReplace.');\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    headers.set('Content-Type', 'application/json');\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Post,\n      headers: headers,\n      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Replace attributes for a model instance and persist it into the data source.\n   *\n   * @param id Model id\n   * @param data Model instance data\n   */\n  public companyReplaceByIdPutCompaniesidWithHttpInfo (id: string, data?: Company, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/${id}'\n      .replace('${' + 'id' + '}', String(id));\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // verify required parameter 'id' is not null or undefined\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companyReplaceByIdPutCompaniesid.');\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    headers.set('Content-Type', 'application/json');\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Put,\n      headers: headers,\n      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Replace an existing model instance or insert a new one into the data source.\n   *\n   * @param data Model instance data\n   */\n  public companyReplaceOrCreatePostCompaniesReplaceOrCreateWithHttpInfo (data?: Company, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/replaceOrCreate';\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    headers.set('Content-Type', 'application/json');\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Post,\n      headers: headers,\n      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Replace an existing model instance or insert a new one into the data source.\n   *\n   * @param data Model instance data\n   */\n  public companyReplaceOrCreatePutCompaniesWithHttpInfo (data?: Company, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies';\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    headers.set('Content-Type', 'application/json');\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Put,\n      headers: headers,\n      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Update instances of the model matched by {{where}} from the data source.\n   *\n   * @param where Criteria to match model instances\n   * @param data An object of model property name/value pairs\n   */\n  public companyUpdateAllWithHttpInfo (where?: string, data?: Company, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/update';\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    if (where !== undefined) {\n      queryParameters.set('where', <any>where);\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    headers.set('Content-Type', 'application/json');\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Post,\n      headers: headers,\n      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n  /**\n   * Update an existing model instance or insert a new one into the data source based on the where criteria.\n   *\n   * @param where Criteria to match model instances\n   * @param data An object of model property name/value pairs\n   */\n  public companyUpsertWithWhereWithHttpInfo (where?: string, data?: Company, extraHttpRequestParams?: any): Observable<Response> {\n    const path = this.basePath + '/Companies/upsertWithWhere';\n\n    let queryParameters = new URLSearchParams();\n    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n    if (where !== undefined) {\n      queryParameters.set('where', <any>where);\n    }\n\n    // to determine the Accept header\n    let produces: string[] = [\n      'application/json',\n      'application/xml',\n      'text/xml',\n      'application/javascript',\n      'text/javascript'\n    ];\n\n    headers.set('Content-Type', 'application/json');\n\n    let requestOptions: RequestOptionsArgs = new RequestOptions({\n      method: RequestMethod.Post,\n      headers: headers,\n      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n      search: queryParameters,\n      withCredentials: this.configuration.withCredentials\n    });\n    // https://github.com/swagger-api/swagger-codegen/issues/4037\n    if (extraHttpRequestParams) {\n      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n    }\n\n    return this.http.request(path, requestOptions);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/swagger/api/company.service.ts","/**\n * bt-server\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.0.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { Http, Headers, URLSearchParams }                    from '@angular/http';\nimport { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';\nimport { Response, ResponseContentType }                     from '@angular/http';\n\nimport { Observable }                                        from 'rxjs/Observable';\nimport '../rxjs-operators';\n\nimport { Entity } from '../model/entity';\nimport { EntityType } from '../model/entityType';\nimport { InlineResponse200 } from '../model/inlineResponse200';\nimport { InlineResponse2001 } from '../model/inlineResponse2001';\nimport { InlineResponse2002 } from '../model/inlineResponse2002';\nimport { Transaction } from '../model/transaction';\n\nimport { COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\nimport { BASE_PATH } from '../../env/environment';\n\n\n@Injectable()\nexport class EntityService {\n\n    protected basePath = 'https://localhost/api';\n    public defaultHeaders: Headers = new Headers();\n    public configuration: Configuration = new Configuration();\n\n    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n\t\t\tthis.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     *\n     * Extends object by coping non-existing properties.\n     * @param objA object to be extended\n     * @param objB source object\n     */\n    private extendObj<T1,T2>(objA: T1, objB: T2) {\n        for(let key in objB){\n            if(objB.hasOwnProperty(key)){\n                (objA as any)[key] = (objB as any)[key];\n            }\n        }\n        return <T1&T2>objA;\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     *\n     * @summary Count instances of the model matched by where from the data source.\n     * @param where Criteria to match model instances\n     */\n    public entityCount(where?: string, extraHttpRequestParams?: any): Observable<InlineResponse200> {\n        return this.entityCountWithHttpInfo(where, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Create a new instance of the model and persist it into the data source.\n     * @param data Model instance data\n     */\n    public entityCreate(data?: Entity, extraHttpRequestParams?: any): Observable<Entity> {\n        return this.entityCreateWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Create a change stream.\n     * @param options\n     */\n    public entityCreateChangeStreamGetEntitiesChangeStream(options?: string, extraHttpRequestParams?: any): Observable<Blob|undefined> {\n        return this.entityCreateChangeStreamGetEntitiesChangeStreamWithHttpInfo(options, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.blob();\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Create a change stream.\n     * @param options\n     */\n    public entityCreateChangeStreamPostEntitiesChangeStream(options?: string, extraHttpRequestParams?: any): Observable<Blob|undefined> {\n        return this.entityCreateChangeStreamPostEntitiesChangeStreamWithHttpInfo(options, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.blob();\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Delete a model instance by {{id}} from the data source.\n     * @param id Model id\n     */\n    public entityDeleteById(id: string, extraHttpRequestParams?: any): Observable<any> {\n        return this.entityDeleteByIdWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Check whether a model instance exists in the data source.\n     * @param id Model id\n     */\n    public entityExistsGetEntitiesidExists(id: string, extraHttpRequestParams?: any): Observable<InlineResponse2001> {\n        return this.entityExistsGetEntitiesidExistsWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Check whether a model instance exists in the data source.\n     * @param id Model id\n     */\n    public entityExistsHeadEntitiesid(id: string, extraHttpRequestParams?: any): Observable<InlineResponse2001> {\n        return this.entityExistsHeadEntitiesidWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find all instances of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public entityFind(filter?: string, extraHttpRequestParams?: any): Observable<Array<Entity>> {\n        return this.entityFindWithHttpInfo(filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find a model instance by {{id}} from the data source.\n     * @param id Model id\n     * @param filter Filter defining fields and include - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public entityFindById(id: string, filter?: string, extraHttpRequestParams?: any): Observable<Entity> {\n        return this.entityFindByIdWithHttpInfo(id, filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find first instance of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public entityFindOne(filter?: string, extraHttpRequestParams?: any): Observable<Entity> {\n        return this.entityFindOneWithHttpInfo(filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Patch an existing model instance or insert a new one into the data source.\n     * @param data Model instance data\n     */\n    public entityPatchOrCreate(data?: Entity, extraHttpRequestParams?: any): Observable<Entity> {\n        return this.entityPatchOrCreateWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Counts transactions of Entity.\n     * @param id Entity id\n     * @param where Criteria to match model instances\n     */\n    public entityPrototypeCountTransactions(id: string, where?: string, extraHttpRequestParams?: any): Observable<InlineResponse200> {\n        return this.entityPrototypeCountTransactionsWithHttpInfo(id, where, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Creates a new instance in transactions of this model.\n     * @param id Entity id\n     * @param data\n     */\n    public entityPrototypeCreateTransactions(id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Transaction> {\n        return this.entityPrototypeCreateTransactionsWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Deletes all transactions of this model.\n     * @param id Entity id\n     */\n    public entityPrototypeDeleteTransactions(id: string, extraHttpRequestParams?: any): Observable<{}> {\n        return this.entityPrototypeDeleteTransactionsWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Delete a related item by id for transactions.\n     * @param fk Foreign key for transactions\n     * @param id Entity id\n     */\n    public entityPrototypeDestroyByIdTransactions(fk: string, id: string, extraHttpRequestParams?: any): Observable<{}> {\n        return this.entityPrototypeDestroyByIdTransactionsWithHttpInfo(fk, id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find a related item by id for transactions.\n     * @param fk Foreign key for transactions\n     * @param id Entity id\n     */\n    public entityPrototypeFindByIdTransactions(fk: string, id: string, extraHttpRequestParams?: any): Observable<Transaction> {\n        return this.entityPrototypeFindByIdTransactionsWithHttpInfo(fk, id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Fetches belongsTo relation entityType.\n     * @param id Entity id\n     * @param refresh\n     */\n    public entityPrototypeGetEntityType(id: string, refresh?: boolean, extraHttpRequestParams?: any): Observable<EntityType> {\n        return this.entityPrototypeGetEntityTypeWithHttpInfo(id, refresh, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Queries transactions of Entity.\n     * @param id Entity id\n     * @param filter\n     */\n    public entityPrototypeGetTransactions(id: string, filter?: string, extraHttpRequestParams?: any): Observable<Array<Transaction>> {\n        return this.entityPrototypeGetTransactionsWithHttpInfo(id, filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Patch attributes for a model instance and persist it into the data source.\n     * @param id Entity id\n     * @param data An object of model property name/value pairs\n     */\n    public entityPrototypePatchAttributes(id: string, data?: Entity, extraHttpRequestParams?: any): Observable<Entity> {\n        return this.entityPrototypePatchAttributesWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Update a related item by id for transactions.\n     * @param fk Foreign key for transactions\n     * @param id Entity id\n     * @param data\n     */\n    public entityPrototypeUpdateByIdTransactions(fk: string, id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Transaction> {\n        return this.entityPrototypeUpdateByIdTransactionsWithHttpInfo(fk, id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace attributes for a model instance and persist it into the data source.\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public entityReplaceByIdPostEntitiesidReplace(id: string, data?: Entity, extraHttpRequestParams?: any): Observable<Entity> {\n        return this.entityReplaceByIdPostEntitiesidReplaceWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace attributes for a model instance and persist it into the data source.\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public entityReplaceByIdPutEntitiesid(id: string, data?: Entity, extraHttpRequestParams?: any): Observable<Entity> {\n        return this.entityReplaceByIdPutEntitiesidWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace an existing model instance or insert a new one into the data source.\n     * @param data Model instance data\n     */\n    public entityReplaceOrCreatePostEntitiesReplaceOrCreate(data?: Entity, extraHttpRequestParams?: any): Observable<Entity> {\n        return this.entityReplaceOrCreatePostEntitiesReplaceOrCreateWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace an existing model instance or insert a new one into the data source.\n     * @param data Model instance data\n     */\n    public entityReplaceOrCreatePutEntities(data?: Entity, extraHttpRequestParams?: any): Observable<Entity> {\n        return this.entityReplaceOrCreatePutEntitiesWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Update instances of the model matched by {{where}} from the data source.\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public entityUpdateAll(where?: string, data?: Entity, extraHttpRequestParams?: any): Observable<InlineResponse2002> {\n        return this.entityUpdateAllWithHttpInfo(where, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Update an existing model instance or insert a new one into the data source based on the where criteria.\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public entityUpsertWithWhere(where?: string, data?: Entity, extraHttpRequestParams?: any): Observable<Entity> {\n        return this.entityUpsertWithWhereWithHttpInfo(where, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n\n    /**\n     * Count instances of the model matched by where from the data source.\n     *\n     * @param where Criteria to match model instances\n     */\n    public entityCountWithHttpInfo(where?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/count';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Create a new instance of the model and persist it into the data source.\n     *\n     * @param data Model instance data\n     */\n    public entityCreateWithHttpInfo(data?: Entity, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Create a change stream.\n     *\n     * @param options\n     */\n    public entityCreateChangeStreamGetEntitiesChangeStreamWithHttpInfo(options?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/change-stream';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (options !== undefined) {\n            queryParameters.set('options', <any>options);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            responseType: ResponseContentType.Blob,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Create a change stream.\n     *\n     * @param options\n     */\n    public entityCreateChangeStreamPostEntitiesChangeStreamWithHttpInfo(options?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/change-stream';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        let canConsumeForm = this.canConsumeForm(consumes);\n        let useForm = false;\n        let formParams = new (useForm ? FormData : URLSearchParams as any)() as {\n          set(param: string, value: any): void;\n        };\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        if (options !== undefined) {\n            formParams.set('options', <any>options);\n        }\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: formParams.toString(),\n            responseType: ResponseContentType.Blob,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Delete a model instance by {{id}} from the data source.\n     *\n     * @param id Model id\n     */\n    public entityDeleteByIdWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityDeleteById.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Delete,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Check whether a model instance exists in the data source.\n     *\n     * @param id Model id\n     */\n    public entityExistsGetEntitiesidExistsWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/${id}/exists'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityExistsGetEntitiesidExists.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Check whether a model instance exists in the data source.\n     *\n     * @param id Model id\n     */\n    public entityExistsHeadEntitiesidWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityExistsHeadEntitiesid.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Head,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find all instances of the model matched by filter from the data source.\n     *\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public entityFindWithHttpInfo(filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find a model instance by {{id}} from the data source.\n     *\n     * @param id Model id\n     * @param filter Filter defining fields and include - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public entityFindByIdWithHttpInfo(id: string, filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityFindById.');\n        }\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find first instance of the model matched by filter from the data source.\n     *\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public entityFindOneWithHttpInfo(filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/findOne';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Patch an existing model instance or insert a new one into the data source.\n     *\n     * @param data Model instance data\n     */\n    public entityPatchOrCreateWithHttpInfo(data?: Entity, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Patch,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Counts transactions of Entity.\n     *\n     * @param id Entity id\n     * @param where Criteria to match model instances\n     */\n    public entityPrototypeCountTransactionsWithHttpInfo(id: string, where?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/${id}/transactions/count'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityPrototypeCountTransactions.');\n        }\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Creates a new instance in transactions of this model.\n     *\n     * @param id Entity id\n     * @param data\n     */\n    public entityPrototypeCreateTransactionsWithHttpInfo(id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/${id}/transactions'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityPrototypeCreateTransactions.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Deletes all transactions of this model.\n     *\n     * @param id Entity id\n     */\n    public entityPrototypeDeleteTransactionsWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/${id}/transactions'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityPrototypeDeleteTransactions.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Delete,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Delete a related item by id for transactions.\n     *\n     * @param fk Foreign key for transactions\n     * @param id Entity id\n     */\n    public entityPrototypeDestroyByIdTransactionsWithHttpInfo(fk: string, id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/${id}/transactions/${fk}'\n                    .replace('${' + 'fk' + '}', String(fk))\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'fk' is not null or undefined\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling entityPrototypeDestroyByIdTransactions.');\n        }\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityPrototypeDestroyByIdTransactions.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Delete,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find a related item by id for transactions.\n     *\n     * @param fk Foreign key for transactions\n     * @param id Entity id\n     */\n    public entityPrototypeFindByIdTransactionsWithHttpInfo(fk: string, id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/${id}/transactions/${fk}'\n                    .replace('${' + 'fk' + '}', String(fk))\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'fk' is not null or undefined\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling entityPrototypeFindByIdTransactions.');\n        }\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityPrototypeFindByIdTransactions.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Fetches belongsTo relation entityType.\n     *\n     * @param id Entity id\n     * @param refresh\n     */\n    public entityPrototypeGetEntityTypeWithHttpInfo(id: string, refresh?: boolean, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/${id}/entityType'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityPrototypeGetEntityType.');\n        }\n        if (refresh !== undefined) {\n            queryParameters.set('refresh', <any>refresh);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Queries transactions of Entity.\n     *\n     * @param id Entity id\n     * @param filter\n     */\n    public entityPrototypeGetTransactionsWithHttpInfo(id: string, filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/${id}/transactions'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityPrototypeGetTransactions.');\n        }\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Patch attributes for a model instance and persist it into the data source.\n     *\n     * @param id Entity id\n     * @param data An object of model property name/value pairs\n     */\n    public entityPrototypePatchAttributesWithHttpInfo(id: string, data?: Entity, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityPrototypePatchAttributes.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Patch,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Update a related item by id for transactions.\n     *\n     * @param fk Foreign key for transactions\n     * @param id Entity id\n     * @param data\n     */\n    public entityPrototypeUpdateByIdTransactionsWithHttpInfo(fk: string, id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/${id}/transactions/${fk}'\n                    .replace('${' + 'fk' + '}', String(fk))\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'fk' is not null or undefined\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling entityPrototypeUpdateByIdTransactions.');\n        }\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityPrototypeUpdateByIdTransactions.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Put,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace attributes for a model instance and persist it into the data source.\n     *\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public entityReplaceByIdPostEntitiesidReplaceWithHttpInfo(id: string, data?: Entity, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/${id}/replace'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityReplaceByIdPostEntitiesidReplace.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace attributes for a model instance and persist it into the data source.\n     *\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public entityReplaceByIdPutEntitiesidWithHttpInfo(id: string, data?: Entity, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityReplaceByIdPutEntitiesid.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Put,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace an existing model instance or insert a new one into the data source.\n     *\n     * @param data Model instance data\n     */\n    public entityReplaceOrCreatePostEntitiesReplaceOrCreateWithHttpInfo(data?: Entity, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/replaceOrCreate';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace an existing model instance or insert a new one into the data source.\n     *\n     * @param data Model instance data\n     */\n    public entityReplaceOrCreatePutEntitiesWithHttpInfo(data?: Entity, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Put,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Update instances of the model matched by {{where}} from the data source.\n     *\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public entityUpdateAllWithHttpInfo(where?: string, data?: Entity, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/update';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Update an existing model instance or insert a new one into the data source based on the where criteria.\n     *\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public entityUpsertWithWhereWithHttpInfo(where?: string, data?: Entity, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Entities/upsertWithWhere';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/swagger/api/entity.service.ts","/**\n * bt-server\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.0.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { Http, Headers, URLSearchParams }                    from '@angular/http';\nimport { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';\nimport { Response, ResponseContentType }                     from '@angular/http';\n\nimport { Observable }                                        from 'rxjs/Observable';\nimport '../rxjs-operators';\n\nimport { Entity } from '../model/entity';\nimport { EntityType } from '../model/entityType';\nimport { InlineResponse200 } from '../model/inlineResponse200';\nimport { InlineResponse2001 } from '../model/inlineResponse2001';\nimport { InlineResponse2002 } from '../model/inlineResponse2002';\n\nimport { COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\nimport { BASE_PATH } from '../../env/environment';\n\n\n@Injectable()\nexport class EntityTypeService {\n\n    protected basePath = 'https://localhost/api';\n    public defaultHeaders: Headers = new Headers();\n    public configuration: Configuration = new Configuration();\n\n    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n\t\t\tthis.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     *\n     * Extends object by coping non-existing properties.\n     * @param objA object to be extended\n     * @param objB source object\n     */\n    private extendObj<T1,T2>(objA: T1, objB: T2) {\n        for(let key in objB){\n            if(objB.hasOwnProperty(key)){\n                (objA as any)[key] = (objB as any)[key];\n            }\n        }\n        return <T1&T2>objA;\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     *\n     * @summary Count instances of the model matched by where from the data source.\n     * @param where Criteria to match model instances\n     */\n    public entityTypeCount(where?: string, extraHttpRequestParams?: any): Observable<InlineResponse200> {\n        return this.entityTypeCountWithHttpInfo(where, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Create a new instance of the model and persist it into the data source.\n     * @param data Model instance data\n     */\n    public entityTypeCreate(data?: EntityType, extraHttpRequestParams?: any): Observable<EntityType> {\n        return this.entityTypeCreateWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Create a change stream.\n     * @param options\n     */\n    public entityTypeCreateChangeStreamGetEntityTypesChangeStream(options?: string, extraHttpRequestParams?: any): Observable<Blob|undefined> {\n        return this.entityTypeCreateChangeStreamGetEntityTypesChangeStreamWithHttpInfo(options, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.blob();\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Create a change stream.\n     * @param options\n     */\n    public entityTypeCreateChangeStreamPostEntityTypesChangeStream(options?: string, extraHttpRequestParams?: any): Observable<Blob|undefined> {\n        return this.entityTypeCreateChangeStreamPostEntityTypesChangeStreamWithHttpInfo(options, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.blob();\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Delete a model instance by {{id}} from the data source.\n     * @param id Model id\n     */\n    public entityTypeDeleteById(id: string, extraHttpRequestParams?: any): Observable<any> {\n        return this.entityTypeDeleteByIdWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Check whether a model instance exists in the data source.\n     * @param id Model id\n     */\n    public entityTypeExistsGetEntityTypesidExists(id: string, extraHttpRequestParams?: any): Observable<InlineResponse2001> {\n        return this.entityTypeExistsGetEntityTypesidExistsWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Check whether a model instance exists in the data source.\n     * @param id Model id\n     */\n    public entityTypeExistsHeadEntityTypesid(id: string, extraHttpRequestParams?: any): Observable<InlineResponse2001> {\n        return this.entityTypeExistsHeadEntityTypesidWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find all instances of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public entityTypeFind(filter?: string, extraHttpRequestParams?: any): Observable<Array<EntityType>> {\n        return this.entityTypeFindWithHttpInfo(filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find a model instance by {{id}} from the data source.\n     * @param id Model id\n     * @param filter Filter defining fields and include - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public entityTypeFindById(id: string, filter?: string, extraHttpRequestParams?: any): Observable<EntityType> {\n        return this.entityTypeFindByIdWithHttpInfo(id, filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find first instance of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public entityTypeFindOne(filter?: string, extraHttpRequestParams?: any): Observable<EntityType> {\n        return this.entityTypeFindOneWithHttpInfo(filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Patch an existing model instance or insert a new one into the data source.\n     * @param data Model instance data\n     */\n    public entityTypePatchOrCreate(data?: EntityType, extraHttpRequestParams?: any): Observable<EntityType> {\n        return this.entityTypePatchOrCreateWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Counts entity of EntityType.\n     * @param id EntityType id\n     * @param where Criteria to match model instances\n     */\n    public entityTypePrototypeCountEntity(id: string, where?: string, extraHttpRequestParams?: any): Observable<InlineResponse200> {\n        return this.entityTypePrototypeCountEntityWithHttpInfo(id, where, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Creates a new instance in entity of this model.\n     * @param id EntityType id\n     * @param data\n     */\n    public entityTypePrototypeCreateEntity(id: string, data?: Entity, extraHttpRequestParams?: any): Observable<Entity> {\n        return this.entityTypePrototypeCreateEntityWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Deletes all entity of this model.\n     * @param id EntityType id\n     */\n    public entityTypePrototypeDeleteEntity(id: string, extraHttpRequestParams?: any): Observable<{}> {\n        return this.entityTypePrototypeDeleteEntityWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Delete a related item by id for entity.\n     * @param fk Foreign key for entity\n     * @param id EntityType id\n     */\n    public entityTypePrototypeDestroyByIdEntity(fk: string, id: string, extraHttpRequestParams?: any): Observable<{}> {\n        return this.entityTypePrototypeDestroyByIdEntityWithHttpInfo(fk, id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find a related item by id for entity.\n     * @param fk Foreign key for entity\n     * @param id EntityType id\n     */\n    public entityTypePrototypeFindByIdEntity(fk: string, id: string, extraHttpRequestParams?: any): Observable<Entity> {\n        return this.entityTypePrototypeFindByIdEntityWithHttpInfo(fk, id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Queries entity of EntityType.\n     * @param id EntityType id\n     * @param filter\n     */\n    public entityTypePrototypeGetEntity(id: string, filter?: string, extraHttpRequestParams?: any): Observable<Array<Entity>> {\n        return this.entityTypePrototypeGetEntityWithHttpInfo(id, filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Patch attributes for a model instance and persist it into the data source.\n     * @param id EntityType id\n     * @param data An object of model property name/value pairs\n     */\n    public entityTypePrototypePatchAttributes(id: string, data?: EntityType, extraHttpRequestParams?: any): Observable<EntityType> {\n        return this.entityTypePrototypePatchAttributesWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Update a related item by id for entity.\n     * @param fk Foreign key for entity\n     * @param id EntityType id\n     * @param data\n     */\n    public entityTypePrototypeUpdateByIdEntity(fk: string, id: string, data?: Entity, extraHttpRequestParams?: any): Observable<Entity> {\n        return this.entityTypePrototypeUpdateByIdEntityWithHttpInfo(fk, id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace attributes for a model instance and persist it into the data source.\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public entityTypeReplaceByIdPostEntityTypesidReplace(id: string, data?: EntityType, extraHttpRequestParams?: any): Observable<EntityType> {\n        return this.entityTypeReplaceByIdPostEntityTypesidReplaceWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace attributes for a model instance and persist it into the data source.\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public entityTypeReplaceByIdPutEntityTypesid(id: string, data?: EntityType, extraHttpRequestParams?: any): Observable<EntityType> {\n        return this.entityTypeReplaceByIdPutEntityTypesidWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace an existing model instance or insert a new one into the data source.\n     * @param data Model instance data\n     */\n    public entityTypeReplaceOrCreatePostEntityTypesReplaceOrCreate(data?: EntityType, extraHttpRequestParams?: any): Observable<EntityType> {\n        return this.entityTypeReplaceOrCreatePostEntityTypesReplaceOrCreateWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace an existing model instance or insert a new one into the data source.\n     * @param data Model instance data\n     */\n    public entityTypeReplaceOrCreatePutEntityTypes(data?: EntityType, extraHttpRequestParams?: any): Observable<EntityType> {\n        return this.entityTypeReplaceOrCreatePutEntityTypesWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Update instances of the model matched by {{where}} from the data source.\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public entityTypeUpdateAll(where?: string, data?: EntityType, extraHttpRequestParams?: any): Observable<InlineResponse2002> {\n        return this.entityTypeUpdateAllWithHttpInfo(where, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Update an existing model instance or insert a new one into the data source based on the where criteria.\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public entityTypeUpsertWithWhere(where?: string, data?: EntityType, extraHttpRequestParams?: any): Observable<EntityType> {\n        return this.entityTypeUpsertWithWhereWithHttpInfo(where, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n\n    /**\n     * Count instances of the model matched by where from the data source.\n     *\n     * @param where Criteria to match model instances\n     */\n    public entityTypeCountWithHttpInfo(where?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/count';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Create a new instance of the model and persist it into the data source.\n     *\n     * @param data Model instance data\n     */\n    public entityTypeCreateWithHttpInfo(data?: EntityType, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Create a change stream.\n     *\n     * @param options\n     */\n    public entityTypeCreateChangeStreamGetEntityTypesChangeStreamWithHttpInfo(options?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/change-stream';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (options !== undefined) {\n            queryParameters.set('options', <any>options);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            responseType: ResponseContentType.Blob,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Create a change stream.\n     *\n     * @param options\n     */\n    public entityTypeCreateChangeStreamPostEntityTypesChangeStreamWithHttpInfo(options?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/change-stream';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        let canConsumeForm = this.canConsumeForm(consumes);\n        let useForm = false;\n        let formParams = new (useForm ? FormData : URLSearchParams as any)() as {\n          set(param: string, value: any): void;\n        };\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        if (options !== undefined) {\n            formParams.set('options', <any>options);\n        }\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: formParams.toString(),\n            responseType: ResponseContentType.Blob,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Delete a model instance by {{id}} from the data source.\n     *\n     * @param id Model id\n     */\n    public entityTypeDeleteByIdWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityTypeDeleteById.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Delete,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Check whether a model instance exists in the data source.\n     *\n     * @param id Model id\n     */\n    public entityTypeExistsGetEntityTypesidExistsWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/${id}/exists'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityTypeExistsGetEntityTypesidExists.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Check whether a model instance exists in the data source.\n     *\n     * @param id Model id\n     */\n    public entityTypeExistsHeadEntityTypesidWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityTypeExistsHeadEntityTypesid.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Head,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find all instances of the model matched by filter from the data source.\n     *\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public entityTypeFindWithHttpInfo(filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find a model instance by {{id}} from the data source.\n     *\n     * @param id Model id\n     * @param filter Filter defining fields and include - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public entityTypeFindByIdWithHttpInfo(id: string, filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityTypeFindById.');\n        }\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find first instance of the model matched by filter from the data source.\n     *\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public entityTypeFindOneWithHttpInfo(filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/findOne';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Patch an existing model instance or insert a new one into the data source.\n     *\n     * @param data Model instance data\n     */\n    public entityTypePatchOrCreateWithHttpInfo(data?: EntityType, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Patch,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Counts entity of EntityType.\n     *\n     * @param id EntityType id\n     * @param where Criteria to match model instances\n     */\n    public entityTypePrototypeCountEntityWithHttpInfo(id: string, where?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/${id}/entity/count'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityTypePrototypeCountEntity.');\n        }\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Creates a new instance in entity of this model.\n     *\n     * @param id EntityType id\n     * @param data\n     */\n    public entityTypePrototypeCreateEntityWithHttpInfo(id: string, data?: Entity, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/${id}/entity'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityTypePrototypeCreateEntity.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Deletes all entity of this model.\n     *\n     * @param id EntityType id\n     */\n    public entityTypePrototypeDeleteEntityWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/${id}/entity'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityTypePrototypeDeleteEntity.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Delete,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Delete a related item by id for entity.\n     *\n     * @param fk Foreign key for entity\n     * @param id EntityType id\n     */\n    public entityTypePrototypeDestroyByIdEntityWithHttpInfo(fk: string, id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/${id}/entity/${fk}'\n                    .replace('${' + 'fk' + '}', String(fk))\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'fk' is not null or undefined\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling entityTypePrototypeDestroyByIdEntity.');\n        }\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityTypePrototypeDestroyByIdEntity.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Delete,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find a related item by id for entity.\n     *\n     * @param fk Foreign key for entity\n     * @param id EntityType id\n     */\n    public entityTypePrototypeFindByIdEntityWithHttpInfo(fk: string, id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/${id}/entity/${fk}'\n                    .replace('${' + 'fk' + '}', String(fk))\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'fk' is not null or undefined\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling entityTypePrototypeFindByIdEntity.');\n        }\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityTypePrototypeFindByIdEntity.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Queries entity of EntityType.\n     *\n     * @param id EntityType id\n     * @param filter\n     */\n    public entityTypePrototypeGetEntityWithHttpInfo(id: string, filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/${id}/entity'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityTypePrototypeGetEntity.');\n        }\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Patch attributes for a model instance and persist it into the data source.\n     *\n     * @param id EntityType id\n     * @param data An object of model property name/value pairs\n     */\n    public entityTypePrototypePatchAttributesWithHttpInfo(id: string, data?: EntityType, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityTypePrototypePatchAttributes.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Patch,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Update a related item by id for entity.\n     *\n     * @param fk Foreign key for entity\n     * @param id EntityType id\n     * @param data\n     */\n    public entityTypePrototypeUpdateByIdEntityWithHttpInfo(fk: string, id: string, data?: Entity, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/${id}/entity/${fk}'\n                    .replace('${' + 'fk' + '}', String(fk))\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'fk' is not null or undefined\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling entityTypePrototypeUpdateByIdEntity.');\n        }\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityTypePrototypeUpdateByIdEntity.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Put,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace attributes for a model instance and persist it into the data source.\n     *\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public entityTypeReplaceByIdPostEntityTypesidReplaceWithHttpInfo(id: string, data?: EntityType, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/${id}/replace'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityTypeReplaceByIdPostEntityTypesidReplace.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace attributes for a model instance and persist it into the data source.\n     *\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public entityTypeReplaceByIdPutEntityTypesidWithHttpInfo(id: string, data?: EntityType, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling entityTypeReplaceByIdPutEntityTypesid.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Put,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace an existing model instance or insert a new one into the data source.\n     *\n     * @param data Model instance data\n     */\n    public entityTypeReplaceOrCreatePostEntityTypesReplaceOrCreateWithHttpInfo(data?: EntityType, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/replaceOrCreate';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace an existing model instance or insert a new one into the data source.\n     *\n     * @param data Model instance data\n     */\n    public entityTypeReplaceOrCreatePutEntityTypesWithHttpInfo(data?: EntityType, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Put,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Update instances of the model matched by {{where}} from the data source.\n     *\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public entityTypeUpdateAllWithHttpInfo(where?: string, data?: EntityType, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/update';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Update an existing model instance or insert a new one into the data source based on the where criteria.\n     *\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public entityTypeUpsertWithWhereWithHttpInfo(where?: string, data?: EntityType, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/EntityTypes/upsertWithWhere';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/swagger/api/entityType.service.ts","/**\n * bt-server\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.0.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { Http, Headers, URLSearchParams }                    from '@angular/http';\nimport { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';\nimport { Response, ResponseContentType }                     from '@angular/http';\n\nimport { Observable }                                        from 'rxjs/Observable';\nimport '../rxjs-operators';\n\nimport { Entity } from '../model/entity';\nimport { InlineResponse200 } from '../model/inlineResponse200';\nimport { InlineResponse2001 } from '../model/inlineResponse2001';\nimport { InlineResponse2002 } from '../model/inlineResponse2002';\nimport { Transaction } from '../model/transaction';\nimport { TransactionType } from '../model/transactionType';\n\nimport { COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\nimport { BASE_PATH } from '../../env/environment';\n\n\n@Injectable()\nexport class TransactionService {\n\n    protected basePath = 'https://localhost/api';\n    public defaultHeaders: Headers = new Headers();\n    public configuration: Configuration = new Configuration();\n\n    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n\t\t\tthis.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     *\n     * Extends object by coping non-existing properties.\n     * @param objA object to be extended\n     * @param objB source object\n     */\n    private extendObj<T1,T2>(objA: T1, objB: T2) {\n        for(let key in objB){\n            if(objB.hasOwnProperty(key)){\n                (objA as any)[key] = (objB as any)[key];\n            }\n        }\n        return <T1&T2>objA;\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     *\n     * @summary Count instances of the model matched by where from the data source.\n     * @param where Criteria to match model instances\n     */\n    public transactionCount(where?: string, extraHttpRequestParams?: any): Observable<InlineResponse200> {\n        return this.transactionCountWithHttpInfo(where, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Create a new instance of the model and persist it into the data source.\n     * @param data Model instance data\n     */\n    public transactionCreate(data?: Transaction, extraHttpRequestParams?: any): Observable<Transaction> {\n        return this.transactionCreateWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Create a change stream.\n     * @param options\n     */\n    public transactionCreateChangeStreamGetTransactionsChangeStream(options?: string, extraHttpRequestParams?: any): Observable<Blob|undefined> {\n        return this.transactionCreateChangeStreamGetTransactionsChangeStreamWithHttpInfo(options, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.blob();\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Create a change stream.\n     * @param options\n     */\n    public transactionCreateChangeStreamPostTransactionsChangeStream(options?: string, extraHttpRequestParams?: any): Observable<Blob|undefined> {\n        return this.transactionCreateChangeStreamPostTransactionsChangeStreamWithHttpInfo(options, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.blob();\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Delete a model instance by {{id}} from the data source.\n     * @param id Model id\n     */\n    public transactionDeleteById(id: string, extraHttpRequestParams?: any): Observable<any> {\n        return this.transactionDeleteByIdWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Check whether a model instance exists in the data source.\n     * @param id Model id\n     */\n    public transactionExistsGetTransactionsidExists(id: string, extraHttpRequestParams?: any): Observable<InlineResponse2001> {\n        return this.transactionExistsGetTransactionsidExistsWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Check whether a model instance exists in the data source.\n     * @param id Model id\n     */\n    public transactionExistsHeadTransactionsid(id: string, extraHttpRequestParams?: any): Observable<InlineResponse2001> {\n        return this.transactionExistsHeadTransactionsidWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find all instances of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public transactionFind(filter?: string, extraHttpRequestParams?: any): Observable<Array<Transaction>> {\n        return this.transactionFindWithHttpInfo(filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find a model instance by {{id}} from the data source.\n     * @param id Model id\n     * @param filter Filter defining fields and include - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public transactionFindById(id: string, filter?: string, extraHttpRequestParams?: any): Observable<Transaction> {\n        return this.transactionFindByIdWithHttpInfo(id, filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find first instance of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public transactionFindOne(filter?: string, extraHttpRequestParams?: any): Observable<Transaction> {\n        return this.transactionFindOneWithHttpInfo(filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Patch an existing model instance or insert a new one into the data source.\n     * @param data Model instance data\n     */\n    public transactionPatchOrCreate(data?: Transaction, extraHttpRequestParams?: any): Observable<Transaction> {\n        return this.transactionPatchOrCreateWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Fetches belongsTo relation entity.\n     * @param id Transaction id\n     * @param refresh\n     */\n    public transactionPrototypeGetEntity(id: string, refresh?: boolean, extraHttpRequestParams?: any): Observable<Entity> {\n        return this.transactionPrototypeGetEntityWithHttpInfo(id, refresh, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Fetches belongsTo relation transactionType.\n     * @param id Transaction id\n     * @param refresh\n     */\n    public transactionPrototypeGetTransactionType(id: string, refresh?: boolean, extraHttpRequestParams?: any): Observable<TransactionType> {\n        return this.transactionPrototypeGetTransactionTypeWithHttpInfo(id, refresh, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Patch attributes for a model instance and persist it into the data source.\n     * @param id Transaction id\n     * @param data An object of model property name/value pairs\n     */\n    public transactionPrototypePatchAttributes(id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Transaction> {\n        return this.transactionPrototypePatchAttributesWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace attributes for a model instance and persist it into the data source.\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public transactionReplaceByIdPostTransactionsidReplace(id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Transaction> {\n        return this.transactionReplaceByIdPostTransactionsidReplaceWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace attributes for a model instance and persist it into the data source.\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public transactionReplaceByIdPutTransactionsid(id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Transaction> {\n        return this.transactionReplaceByIdPutTransactionsidWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace an existing model instance or insert a new one into the data source.\n     * @param data Model instance data\n     */\n    public transactionReplaceOrCreatePostTransactionsReplaceOrCreate(data?: Transaction, extraHttpRequestParams?: any): Observable<Transaction> {\n        return this.transactionReplaceOrCreatePostTransactionsReplaceOrCreateWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace an existing model instance or insert a new one into the data source.\n     * @param data Model instance data\n     */\n    public transactionReplaceOrCreatePutTransactions(data?: Transaction, extraHttpRequestParams?: any): Observable<Transaction> {\n        return this.transactionReplaceOrCreatePutTransactionsWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Update instances of the model matched by {{where}} from the data source.\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public transactionUpdateAll(where?: string, data?: Transaction, extraHttpRequestParams?: any): Observable<InlineResponse2002> {\n        return this.transactionUpdateAllWithHttpInfo(where, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Update an existing model instance or insert a new one into the data source based on the where criteria.\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public transactionUpsertWithWhere(where?: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Transaction> {\n        return this.transactionUpsertWithWhereWithHttpInfo(where, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n\n    /**\n     * Count instances of the model matched by where from the data source.\n     *\n     * @param where Criteria to match model instances\n     */\n    public transactionCountWithHttpInfo(where?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions/count';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Create a new instance of the model and persist it into the data source.\n     *\n     * @param data Model instance data\n     */\n    public transactionCreateWithHttpInfo(data?: Transaction, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Create a change stream.\n     *\n     * @param options\n     */\n    public transactionCreateChangeStreamGetTransactionsChangeStreamWithHttpInfo(options?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions/change-stream';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (options !== undefined) {\n            queryParameters.set('options', <any>options);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            responseType: ResponseContentType.Blob,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Create a change stream.\n     *\n     * @param options\n     */\n    public transactionCreateChangeStreamPostTransactionsChangeStreamWithHttpInfo(options?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions/change-stream';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        let canConsumeForm = this.canConsumeForm(consumes);\n        let useForm = false;\n        let formParams = new (useForm ? FormData : URLSearchParams as any)() as {\n          set(param: string, value: any): void;\n        };\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        if (options !== undefined) {\n            formParams.set('options', <any>options);\n        }\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: formParams.toString(),\n            responseType: ResponseContentType.Blob,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Delete a model instance by {{id}} from the data source.\n     *\n     * @param id Model id\n     */\n    public transactionDeleteByIdWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionDeleteById.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Delete,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Check whether a model instance exists in the data source.\n     *\n     * @param id Model id\n     */\n    public transactionExistsGetTransactionsidExistsWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions/${id}/exists'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionExistsGetTransactionsidExists.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Check whether a model instance exists in the data source.\n     *\n     * @param id Model id\n     */\n    public transactionExistsHeadTransactionsidWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionExistsHeadTransactionsid.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Head,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find all instances of the model matched by filter from the data source.\n     *\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public transactionFindWithHttpInfo(filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find a model instance by {{id}} from the data source.\n     *\n     * @param id Model id\n     * @param filter Filter defining fields and include - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public transactionFindByIdWithHttpInfo(id: string, filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionFindById.');\n        }\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find first instance of the model matched by filter from the data source.\n     *\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public transactionFindOneWithHttpInfo(filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions/findOne';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Patch an existing model instance or insert a new one into the data source.\n     *\n     * @param data Model instance data\n     */\n    public transactionPatchOrCreateWithHttpInfo(data?: Transaction, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Patch,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Fetches belongsTo relation entity.\n     *\n     * @param id Transaction id\n     * @param refresh\n     */\n    public transactionPrototypeGetEntityWithHttpInfo(id: string, refresh?: boolean, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions/${id}/entity'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionPrototypeGetEntity.');\n        }\n        if (refresh !== undefined) {\n            queryParameters.set('refresh', <any>refresh);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Fetches belongsTo relation transactionType.\n     *\n     * @param id Transaction id\n     * @param refresh\n     */\n    public transactionPrototypeGetTransactionTypeWithHttpInfo(id: string, refresh?: boolean, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions/${id}/transactionType'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionPrototypeGetTransactionType.');\n        }\n        if (refresh !== undefined) {\n            queryParameters.set('refresh', <any>refresh);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Patch attributes for a model instance and persist it into the data source.\n     *\n     * @param id Transaction id\n     * @param data An object of model property name/value pairs\n     */\n    public transactionPrototypePatchAttributesWithHttpInfo(id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionPrototypePatchAttributes.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Patch,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace attributes for a model instance and persist it into the data source.\n     *\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public transactionReplaceByIdPostTransactionsidReplaceWithHttpInfo(id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions/${id}/replace'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionReplaceByIdPostTransactionsidReplace.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace attributes for a model instance and persist it into the data source.\n     *\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public transactionReplaceByIdPutTransactionsidWithHttpInfo(id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionReplaceByIdPutTransactionsid.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Put,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace an existing model instance or insert a new one into the data source.\n     *\n     * @param data Model instance data\n     */\n    public transactionReplaceOrCreatePostTransactionsReplaceOrCreateWithHttpInfo(data?: Transaction, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions/replaceOrCreate';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace an existing model instance or insert a new one into the data source.\n     *\n     * @param data Model instance data\n     */\n    public transactionReplaceOrCreatePutTransactionsWithHttpInfo(data?: Transaction, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Put,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Update instances of the model matched by {{where}} from the data source.\n     *\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public transactionUpdateAllWithHttpInfo(where?: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions/update';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Update an existing model instance or insert a new one into the data source based on the where criteria.\n     *\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public transactionUpsertWithWhereWithHttpInfo(where?: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Transactions/upsertWithWhere';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/swagger/api/transaction.service.ts","/**\n * bt-server\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.0.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { Http, Headers, URLSearchParams }                    from '@angular/http';\nimport { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';\nimport { Response, ResponseContentType }                     from '@angular/http';\n\nimport { Observable }                                        from 'rxjs/Observable';\nimport '../rxjs-operators';\n\nimport { InlineResponse200 } from '../model/inlineResponse200';\nimport { InlineResponse2001 } from '../model/inlineResponse2001';\nimport { InlineResponse2002 } from '../model/inlineResponse2002';\nimport { Transaction } from '../model/transaction';\nimport { TransactionType } from '../model/transactionType';\n\nimport { COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\nimport { BASE_PATH } from '../../env/environment';\n\n\n@Injectable()\nexport class TransactionTypeService {\n\n    protected basePath = 'https://localhost/api';\n    public defaultHeaders: Headers = new Headers();\n    public configuration: Configuration = new Configuration();\n\n    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n\t\t\tthis.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     *\n     * Extends object by coping non-existing properties.\n     * @param objA object to be extended\n     * @param objB source object\n     */\n    private extendObj<T1,T2>(objA: T1, objB: T2) {\n        for(let key in objB){\n            if(objB.hasOwnProperty(key)){\n                (objA as any)[key] = (objB as any)[key];\n            }\n        }\n        return <T1&T2>objA;\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     *\n     * @summary Count instances of the model matched by where from the data source.\n     * @param where Criteria to match model instances\n     */\n    public transactionTypeCount(where?: string, extraHttpRequestParams?: any): Observable<InlineResponse200> {\n        return this.transactionTypeCountWithHttpInfo(where, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Create a new instance of the model and persist it into the data source.\n     * @param data Model instance data\n     */\n    public transactionTypeCreate(data?: TransactionType, extraHttpRequestParams?: any): Observable<TransactionType> {\n        return this.transactionTypeCreateWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Create a change stream.\n     * @param options\n     */\n    public transactionTypeCreateChangeStreamGetTransactionTypesChangeStream(options?: string, extraHttpRequestParams?: any): Observable<Blob|undefined> {\n        return this.transactionTypeCreateChangeStreamGetTransactionTypesChangeStreamWithHttpInfo(options, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.blob();\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Create a change stream.\n     * @param options\n     */\n    public transactionTypeCreateChangeStreamPostTransactionTypesChangeStream(options?: string, extraHttpRequestParams?: any): Observable<Blob|undefined> {\n        return this.transactionTypeCreateChangeStreamPostTransactionTypesChangeStreamWithHttpInfo(options, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.blob();\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Delete a model instance by {{id}} from the data source.\n     * @param id Model id\n     */\n    public transactionTypeDeleteById(id: string, extraHttpRequestParams?: any): Observable<any> {\n        return this.transactionTypeDeleteByIdWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Check whether a model instance exists in the data source.\n     * @param id Model id\n     */\n    public transactionTypeExistsGetTransactionTypesidExists(id: string, extraHttpRequestParams?: any): Observable<InlineResponse2001> {\n        return this.transactionTypeExistsGetTransactionTypesidExistsWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Check whether a model instance exists in the data source.\n     * @param id Model id\n     */\n    public transactionTypeExistsHeadTransactionTypesid(id: string, extraHttpRequestParams?: any): Observable<InlineResponse2001> {\n        return this.transactionTypeExistsHeadTransactionTypesidWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find all instances of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public transactionTypeFind(filter?: string, extraHttpRequestParams?: any): Observable<Array<TransactionType>> {\n        return this.transactionTypeFindWithHttpInfo(filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find a model instance by {{id}} from the data source.\n     * @param id Model id\n     * @param filter Filter defining fields and include - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public transactionTypeFindById(id: string, filter?: string, extraHttpRequestParams?: any): Observable<TransactionType> {\n        return this.transactionTypeFindByIdWithHttpInfo(id, filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find first instance of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public transactionTypeFindOne(filter?: string, extraHttpRequestParams?: any): Observable<TransactionType> {\n        return this.transactionTypeFindOneWithHttpInfo(filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Patch an existing model instance or insert a new one into the data source.\n     * @param data Model instance data\n     */\n    public transactionTypePatchOrCreate(data?: TransactionType, extraHttpRequestParams?: any): Observable<TransactionType> {\n        return this.transactionTypePatchOrCreateWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Counts transactions of TransactionType.\n     * @param id TransactionType id\n     * @param where Criteria to match model instances\n     */\n    public transactionTypePrototypeCountTransactions(id: string, where?: string, extraHttpRequestParams?: any): Observable<InlineResponse200> {\n        return this.transactionTypePrototypeCountTransactionsWithHttpInfo(id, where, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Creates a new instance in transactions of this model.\n     * @param id TransactionType id\n     * @param data\n     */\n    public transactionTypePrototypeCreateTransactions(id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Transaction> {\n        return this.transactionTypePrototypeCreateTransactionsWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Deletes all transactions of this model.\n     * @param id TransactionType id\n     */\n    public transactionTypePrototypeDeleteTransactions(id: string, extraHttpRequestParams?: any): Observable<{}> {\n        return this.transactionTypePrototypeDeleteTransactionsWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Delete a related item by id for transactions.\n     * @param fk Foreign key for transactions\n     * @param id TransactionType id\n     */\n    public transactionTypePrototypeDestroyByIdTransactions(fk: string, id: string, extraHttpRequestParams?: any): Observable<{}> {\n        return this.transactionTypePrototypeDestroyByIdTransactionsWithHttpInfo(fk, id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find a related item by id for transactions.\n     * @param fk Foreign key for transactions\n     * @param id TransactionType id\n     */\n    public transactionTypePrototypeFindByIdTransactions(fk: string, id: string, extraHttpRequestParams?: any): Observable<Transaction> {\n        return this.transactionTypePrototypeFindByIdTransactionsWithHttpInfo(fk, id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Queries transactions of TransactionType.\n     * @param id TransactionType id\n     * @param filter\n     */\n    public transactionTypePrototypeGetTransactions(id: string, filter?: string, extraHttpRequestParams?: any): Observable<Array<Transaction>> {\n        return this.transactionTypePrototypeGetTransactionsWithHttpInfo(id, filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Patch attributes for a model instance and persist it into the data source.\n     * @param id TransactionType id\n     * @param data An object of model property name/value pairs\n     */\n    public transactionTypePrototypePatchAttributes(id: string, data?: TransactionType, extraHttpRequestParams?: any): Observable<TransactionType> {\n        return this.transactionTypePrototypePatchAttributesWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Update a related item by id for transactions.\n     * @param fk Foreign key for transactions\n     * @param id TransactionType id\n     * @param data\n     */\n    public transactionTypePrototypeUpdateByIdTransactions(fk: string, id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Transaction> {\n        return this.transactionTypePrototypeUpdateByIdTransactionsWithHttpInfo(fk, id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace attributes for a model instance and persist it into the data source.\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public transactionTypeReplaceByIdPostTransactionTypesidReplace(id: string, data?: TransactionType, extraHttpRequestParams?: any): Observable<TransactionType> {\n        return this.transactionTypeReplaceByIdPostTransactionTypesidReplaceWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace attributes for a model instance and persist it into the data source.\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public transactionTypeReplaceByIdPutTransactionTypesid(id: string, data?: TransactionType, extraHttpRequestParams?: any): Observable<TransactionType> {\n        return this.transactionTypeReplaceByIdPutTransactionTypesidWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace an existing model instance or insert a new one into the data source.\n     * @param data Model instance data\n     */\n    public transactionTypeReplaceOrCreatePostTransactionTypesReplaceOrCreate(data?: TransactionType, extraHttpRequestParams?: any): Observable<TransactionType> {\n        return this.transactionTypeReplaceOrCreatePostTransactionTypesReplaceOrCreateWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace an existing model instance or insert a new one into the data source.\n     * @param data Model instance data\n     */\n    public transactionTypeReplaceOrCreatePutTransactionTypes(data?: TransactionType, extraHttpRequestParams?: any): Observable<TransactionType> {\n        return this.transactionTypeReplaceOrCreatePutTransactionTypesWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Update instances of the model matched by {{where}} from the data source.\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public transactionTypeUpdateAll(where?: string, data?: TransactionType, extraHttpRequestParams?: any): Observable<InlineResponse2002> {\n        return this.transactionTypeUpdateAllWithHttpInfo(where, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Update an existing model instance or insert a new one into the data source based on the where criteria.\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public transactionTypeUpsertWithWhere(where?: string, data?: TransactionType, extraHttpRequestParams?: any): Observable<TransactionType> {\n        return this.transactionTypeUpsertWithWhereWithHttpInfo(where, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n\n    /**\n     * Count instances of the model matched by where from the data source.\n     *\n     * @param where Criteria to match model instances\n     */\n    public transactionTypeCountWithHttpInfo(where?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/count';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Create a new instance of the model and persist it into the data source.\n     *\n     * @param data Model instance data\n     */\n    public transactionTypeCreateWithHttpInfo(data?: TransactionType, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Create a change stream.\n     *\n     * @param options\n     */\n    public transactionTypeCreateChangeStreamGetTransactionTypesChangeStreamWithHttpInfo(options?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/change-stream';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (options !== undefined) {\n            queryParameters.set('options', <any>options);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            responseType: ResponseContentType.Blob,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Create a change stream.\n     *\n     * @param options\n     */\n    public transactionTypeCreateChangeStreamPostTransactionTypesChangeStreamWithHttpInfo(options?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/change-stream';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        let canConsumeForm = this.canConsumeForm(consumes);\n        let useForm = false;\n        let formParams = new (useForm ? FormData : URLSearchParams as any)() as {\n          set(param: string, value: any): void;\n        };\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        if (options !== undefined) {\n            formParams.set('options', <any>options);\n        }\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: formParams.toString(),\n            responseType: ResponseContentType.Blob,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Delete a model instance by {{id}} from the data source.\n     *\n     * @param id Model id\n     */\n    public transactionTypeDeleteByIdWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionTypeDeleteById.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Delete,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Check whether a model instance exists in the data source.\n     *\n     * @param id Model id\n     */\n    public transactionTypeExistsGetTransactionTypesidExistsWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/${id}/exists'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionTypeExistsGetTransactionTypesidExists.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Check whether a model instance exists in the data source.\n     *\n     * @param id Model id\n     */\n    public transactionTypeExistsHeadTransactionTypesidWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionTypeExistsHeadTransactionTypesid.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Head,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find all instances of the model matched by filter from the data source.\n     *\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public transactionTypeFindWithHttpInfo(filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find a model instance by {{id}} from the data source.\n     *\n     * @param id Model id\n     * @param filter Filter defining fields and include - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public transactionTypeFindByIdWithHttpInfo(id: string, filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionTypeFindById.');\n        }\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find first instance of the model matched by filter from the data source.\n     *\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public transactionTypeFindOneWithHttpInfo(filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/findOne';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Patch an existing model instance or insert a new one into the data source.\n     *\n     * @param data Model instance data\n     */\n    public transactionTypePatchOrCreateWithHttpInfo(data?: TransactionType, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Patch,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Counts transactions of TransactionType.\n     *\n     * @param id TransactionType id\n     * @param where Criteria to match model instances\n     */\n    public transactionTypePrototypeCountTransactionsWithHttpInfo(id: string, where?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/${id}/transactions/count'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionTypePrototypeCountTransactions.');\n        }\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Creates a new instance in transactions of this model.\n     *\n     * @param id TransactionType id\n     * @param data\n     */\n    public transactionTypePrototypeCreateTransactionsWithHttpInfo(id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/${id}/transactions'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionTypePrototypeCreateTransactions.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Deletes all transactions of this model.\n     *\n     * @param id TransactionType id\n     */\n    public transactionTypePrototypeDeleteTransactionsWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/${id}/transactions'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionTypePrototypeDeleteTransactions.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Delete,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Delete a related item by id for transactions.\n     *\n     * @param fk Foreign key for transactions\n     * @param id TransactionType id\n     */\n    public transactionTypePrototypeDestroyByIdTransactionsWithHttpInfo(fk: string, id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/${id}/transactions/${fk}'\n                    .replace('${' + 'fk' + '}', String(fk))\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'fk' is not null or undefined\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling transactionTypePrototypeDestroyByIdTransactions.');\n        }\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionTypePrototypeDestroyByIdTransactions.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Delete,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find a related item by id for transactions.\n     *\n     * @param fk Foreign key for transactions\n     * @param id TransactionType id\n     */\n    public transactionTypePrototypeFindByIdTransactionsWithHttpInfo(fk: string, id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/${id}/transactions/${fk}'\n                    .replace('${' + 'fk' + '}', String(fk))\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'fk' is not null or undefined\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling transactionTypePrototypeFindByIdTransactions.');\n        }\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionTypePrototypeFindByIdTransactions.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Queries transactions of TransactionType.\n     *\n     * @param id TransactionType id\n     * @param filter\n     */\n    public transactionTypePrototypeGetTransactionsWithHttpInfo(id: string, filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/${id}/transactions'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionTypePrototypeGetTransactions.');\n        }\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Patch attributes for a model instance and persist it into the data source.\n     *\n     * @param id TransactionType id\n     * @param data An object of model property name/value pairs\n     */\n    public transactionTypePrototypePatchAttributesWithHttpInfo(id: string, data?: TransactionType, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionTypePrototypePatchAttributes.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Patch,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Update a related item by id for transactions.\n     *\n     * @param fk Foreign key for transactions\n     * @param id TransactionType id\n     * @param data\n     */\n    public transactionTypePrototypeUpdateByIdTransactionsWithHttpInfo(fk: string, id: string, data?: Transaction, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/${id}/transactions/${fk}'\n                    .replace('${' + 'fk' + '}', String(fk))\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'fk' is not null or undefined\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling transactionTypePrototypeUpdateByIdTransactions.');\n        }\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionTypePrototypeUpdateByIdTransactions.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Put,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace attributes for a model instance and persist it into the data source.\n     *\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public transactionTypeReplaceByIdPostTransactionTypesidReplaceWithHttpInfo(id: string, data?: TransactionType, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/${id}/replace'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionTypeReplaceByIdPostTransactionTypesidReplace.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace attributes for a model instance and persist it into the data source.\n     *\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public transactionTypeReplaceByIdPutTransactionTypesidWithHttpInfo(id: string, data?: TransactionType, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling transactionTypeReplaceByIdPutTransactionTypesid.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Put,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace an existing model instance or insert a new one into the data source.\n     *\n     * @param data Model instance data\n     */\n    public transactionTypeReplaceOrCreatePostTransactionTypesReplaceOrCreateWithHttpInfo(data?: TransactionType, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/replaceOrCreate';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace an existing model instance or insert a new one into the data source.\n     *\n     * @param data Model instance data\n     */\n    public transactionTypeReplaceOrCreatePutTransactionTypesWithHttpInfo(data?: TransactionType, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Put,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Update instances of the model matched by {{where}} from the data source.\n     *\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public transactionTypeUpdateAllWithHttpInfo(where?: string, data?: TransactionType, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/update';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Update an existing model instance or insert a new one into the data source based on the where criteria.\n     *\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public transactionTypeUpsertWithWhereWithHttpInfo(where?: string, data?: TransactionType, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/TransactionTypes/upsertWithWhere';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/swagger/api/transactionType.service.ts","/**\n * bt-server\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.0.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { Http, Headers, URLSearchParams }                    from '@angular/http';\nimport { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';\nimport { Response, ResponseContentType }                     from '@angular/http';\n\nimport { Observable }                                        from 'rxjs/Observable';\nimport '../rxjs-operators';\n\nimport { AccessToken } from '../model/accessToken';\nimport { InlineResponse200 } from '../model/inlineResponse200';\nimport { InlineResponse2001 } from '../model/inlineResponse2001';\nimport { InlineResponse2002 } from '../model/inlineResponse2002';\nimport { User } from '../model/user';\n\nimport { COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\nimport { BASE_PATH } from '../../env/environment';\n\n\n@Injectable()\nexport class UserService {\n\n    protected basePath = 'https://localhost/api';\n    public defaultHeaders: Headers = new Headers();\n    public configuration: Configuration = new Configuration();\n\n    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n\t\t\tthis.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     *\n     * Extends object by coping non-existing properties.\n     * @param objA object to be extended\n     * @param objB source object\n     */\n    private extendObj<T1,T2>(objA: T1, objB: T2) {\n        for(let key in objB){\n            if(objB.hasOwnProperty(key)){\n                (objA as any)[key] = (objB as any)[key];\n            }\n        }\n        return <T1&T2>objA;\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     *\n     * @summary Change a user's password.\n     * @param oldPassword\n     * @param newPassword\n     */\n    public userChangePassword(oldPassword: string, newPassword: string, extraHttpRequestParams?: any): Observable<{}> {\n        return this.userChangePasswordWithHttpInfo(oldPassword, newPassword, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Confirm a user registration with identity verification token.\n     * @param uid\n     * @param token\n     * @param redirect\n     */\n    public userConfirm(uid: string, token: string, redirect?: string, extraHttpRequestParams?: any): Observable<{}> {\n        return this.userConfirmWithHttpInfo(uid, token, redirect, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Count instances of the model matched by where from the data source.\n     * @param where Criteria to match model instances\n     */\n    public userCount(where?: string, extraHttpRequestParams?: any): Observable<InlineResponse200> {\n        return this.userCountWithHttpInfo(where, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Create a new instance of the model and persist it into the data source.\n     * @param data Model instance data\n     */\n    public userCreate(data?: User, extraHttpRequestParams?: any): Observable<User> {\n        return this.userCreateWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Create a change stream.\n     * @param options\n     */\n    public userCreateChangeStreamGetUsersChangeStream(options?: string, extraHttpRequestParams?: any): Observable<Blob|undefined> {\n        return this.userCreateChangeStreamGetUsersChangeStreamWithHttpInfo(options, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.blob();\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Create a change stream.\n     * @param options\n     */\n    public userCreateChangeStreamPostUsersChangeStream(options?: string, extraHttpRequestParams?: any): Observable<Blob|undefined> {\n        return this.userCreateChangeStreamPostUsersChangeStreamWithHttpInfo(options, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.blob();\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Delete a model instance by {{id}} from the data source.\n     * @param id Model id\n     */\n    public userDeleteById(id: string, extraHttpRequestParams?: any): Observable<any> {\n        return this.userDeleteByIdWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Check whether a model instance exists in the data source.\n     * @param id Model id\n     */\n    public userExistsGetUsersidExists(id: string, extraHttpRequestParams?: any): Observable<InlineResponse2001> {\n        return this.userExistsGetUsersidExistsWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Check whether a model instance exists in the data source.\n     * @param id Model id\n     */\n    public userExistsHeadUsersid(id: string, extraHttpRequestParams?: any): Observable<InlineResponse2001> {\n        return this.userExistsHeadUsersidWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find all instances of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public userFind(filter?: string, extraHttpRequestParams?: any): Observable<Array<User>> {\n        return this.userFindWithHttpInfo(filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find a model instance by {{id}} from the data source.\n     * @param id Model id\n     * @param filter Filter defining fields and include - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public userFindById(id: string, filter?: string, extraHttpRequestParams?: any): Observable<User> {\n        return this.userFindByIdWithHttpInfo(id, filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find first instance of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public userFindOne(filter?: string, extraHttpRequestParams?: any): Observable<User> {\n        return this.userFindOneWithHttpInfo(filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Login a user with username/email and password.\n     * @param credentials\n     * @param include Related objects to include in the response. See the description of return value for more details.\n     */\n    public userLogin(credentials: any, include?: string, extraHttpRequestParams?: any): Observable<any> {\n        return this.userLoginWithHttpInfo(credentials, include, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Logout a user with access token.\n     */\n    public userLogout(extraHttpRequestParams?: any): Observable<{}> {\n        return this.userLogoutWithHttpInfo(extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Patch an existing model instance or insert a new one into the data source.\n     * @param data Model instance data\n     */\n    public userPatchOrCreate(data?: User, extraHttpRequestParams?: any): Observable<User> {\n        return this.userPatchOrCreateWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Counts accessTokens of User.\n     * @param id User id\n     * @param where Criteria to match model instances\n     */\n    public userPrototypeCountAccessTokens(id: string, where?: string, extraHttpRequestParams?: any): Observable<InlineResponse200> {\n        return this.userPrototypeCountAccessTokensWithHttpInfo(id, where, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Creates a new instance in accessTokens of this model.\n     * @param id User id\n     * @param data\n     */\n    public userPrototypeCreateAccessTokens(id: string, data?: AccessToken, extraHttpRequestParams?: any): Observable<AccessToken> {\n        return this.userPrototypeCreateAccessTokensWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Deletes all accessTokens of this model.\n     * @param id User id\n     */\n    public userPrototypeDeleteAccessTokens(id: string, extraHttpRequestParams?: any): Observable<{}> {\n        return this.userPrototypeDeleteAccessTokensWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Delete a related item by id for accessTokens.\n     * @param fk Foreign key for accessTokens\n     * @param id User id\n     */\n    public userPrototypeDestroyByIdAccessTokens(fk: string, id: string, extraHttpRequestParams?: any): Observable<{}> {\n        return this.userPrototypeDestroyByIdAccessTokensWithHttpInfo(fk, id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find a related item by id for accessTokens.\n     * @param fk Foreign key for accessTokens\n     * @param id User id\n     */\n    public userPrototypeFindByIdAccessTokens(fk: string, id: string, extraHttpRequestParams?: any): Observable<AccessToken> {\n        return this.userPrototypeFindByIdAccessTokensWithHttpInfo(fk, id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Queries accessTokens of User.\n     * @param id User id\n     * @param filter\n     */\n    public userPrototypeGetAccessTokens(id: string, filter?: string, extraHttpRequestParams?: any): Observable<Array<AccessToken>> {\n        return this.userPrototypeGetAccessTokensWithHttpInfo(id, filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Patch attributes for a model instance and persist it into the data source.\n     * @param id User id\n     * @param data An object of model property name/value pairs\n     */\n    public userPrototypePatchAttributes(id: string, data?: User, extraHttpRequestParams?: any): Observable<User> {\n        return this.userPrototypePatchAttributesWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Update a related item by id for accessTokens.\n     * @param fk Foreign key for accessTokens\n     * @param id User id\n     * @param data\n     */\n    public userPrototypeUpdateByIdAccessTokens(fk: string, id: string, data?: AccessToken, extraHttpRequestParams?: any): Observable<AccessToken> {\n        return this.userPrototypeUpdateByIdAccessTokensWithHttpInfo(fk, id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Trigger user's identity verification with configured verifyOptions\n     * @param id User id\n     */\n    public userPrototypeVerify(id: string, extraHttpRequestParams?: any): Observable<{}> {\n        return this.userPrototypeVerifyWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace attributes for a model instance and persist it into the data source.\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public userReplaceByIdPostUsersidReplace(id: string, data?: User, extraHttpRequestParams?: any): Observable<User> {\n        return this.userReplaceByIdPostUsersidReplaceWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace attributes for a model instance and persist it into the data source.\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public userReplaceByIdPutUsersid(id: string, data?: User, extraHttpRequestParams?: any): Observable<User> {\n        return this.userReplaceByIdPutUsersidWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace an existing model instance or insert a new one into the data source.\n     * @param data Model instance data\n     */\n    public userReplaceOrCreatePostUsersReplaceOrCreate(data?: User, extraHttpRequestParams?: any): Observable<User> {\n        return this.userReplaceOrCreatePostUsersReplaceOrCreateWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace an existing model instance or insert a new one into the data source.\n     * @param data Model instance data\n     */\n    public userReplaceOrCreatePutUsers(data?: User, extraHttpRequestParams?: any): Observable<User> {\n        return this.userReplaceOrCreatePutUsersWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Reset password for a user with email.\n     * @param options\n     */\n    public userResetPassword(options: any, extraHttpRequestParams?: any): Observable<{}> {\n        return this.userResetPasswordWithHttpInfo(options, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Reset user's password via a password-reset token.\n     * @param newPassword\n     */\n    public userSetPassword(newPassword: string, extraHttpRequestParams?: any): Observable<{}> {\n        return this.userSetPasswordWithHttpInfo(newPassword, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Update instances of the model matched by {{where}} from the data source.\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public userUpdateAll(where?: string, data?: User, extraHttpRequestParams?: any): Observable<InlineResponse2002> {\n        return this.userUpdateAllWithHttpInfo(where, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Update an existing model instance or insert a new one into the data source based on the where criteria.\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public userUpsertWithWhere(where?: string, data?: User, extraHttpRequestParams?: any): Observable<User> {\n        return this.userUpsertWithWhereWithHttpInfo(where, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n\n    /**\n     * Change a user&#39;s password.\n     *\n     * @param oldPassword\n     * @param newPassword\n     */\n    public userChangePasswordWithHttpInfo(oldPassword: string, newPassword: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/change-password';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'oldPassword' is not null or undefined\n        if (oldPassword === null || oldPassword === undefined) {\n            throw new Error('Required parameter oldPassword was null or undefined when calling userChangePassword.');\n        }\n        // verify required parameter 'newPassword' is not null or undefined\n        if (newPassword === null || newPassword === undefined) {\n            throw new Error('Required parameter newPassword was null or undefined when calling userChangePassword.');\n        }\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        let canConsumeForm = this.canConsumeForm(consumes);\n        let useForm = false;\n        let formParams = new (useForm ? FormData : URLSearchParams as any)() as {\n          set(param: string, value: any): void;\n        };\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        if (oldPassword !== undefined) {\n            formParams.set('oldPassword', <any>oldPassword);\n        }\n\n        if (newPassword !== undefined) {\n            formParams.set('newPassword', <any>newPassword);\n        }\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: formParams.toString(),\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Confirm a user registration with identity verification token.\n     *\n     * @param uid\n     * @param token\n     * @param redirect\n     */\n    public userConfirmWithHttpInfo(uid: string, token: string, redirect?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/confirm';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'uid' is not null or undefined\n        if (uid === null || uid === undefined) {\n            throw new Error('Required parameter uid was null or undefined when calling userConfirm.');\n        }\n        // verify required parameter 'token' is not null or undefined\n        if (token === null || token === undefined) {\n            throw new Error('Required parameter token was null or undefined when calling userConfirm.');\n        }\n        if (uid !== undefined) {\n            queryParameters.set('uid', <any>uid);\n        }\n\n        if (token !== undefined) {\n            queryParameters.set('token', <any>token);\n        }\n\n        if (redirect !== undefined) {\n            queryParameters.set('redirect', <any>redirect);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Count instances of the model matched by where from the data source.\n     *\n     * @param where Criteria to match model instances\n     */\n    public userCountWithHttpInfo(where?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/count';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Create a new instance of the model and persist it into the data source.\n     *\n     * @param data Model instance data\n     */\n    public userCreateWithHttpInfo(data?: User, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Create a change stream.\n     *\n     * @param options\n     */\n    public userCreateChangeStreamGetUsersChangeStreamWithHttpInfo(options?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/change-stream';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (options !== undefined) {\n            queryParameters.set('options', <any>options);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            responseType: ResponseContentType.Blob,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Create a change stream.\n     *\n     * @param options\n     */\n    public userCreateChangeStreamPostUsersChangeStreamWithHttpInfo(options?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/change-stream';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        let canConsumeForm = this.canConsumeForm(consumes);\n        let useForm = false;\n        let formParams = new (useForm ? FormData : URLSearchParams as any)() as {\n          set(param: string, value: any): void;\n        };\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        if (options !== undefined) {\n            formParams.set('options', <any>options);\n        }\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: formParams.toString(),\n            responseType: ResponseContentType.Blob,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Delete a model instance by {{id}} from the data source.\n     *\n     * @param id Model id\n     */\n    public userDeleteByIdWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling userDeleteById.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Delete,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Check whether a model instance exists in the data source.\n     *\n     * @param id Model id\n     */\n    public userExistsGetUsersidExistsWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/${id}/exists'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling userExistsGetUsersidExists.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Check whether a model instance exists in the data source.\n     *\n     * @param id Model id\n     */\n    public userExistsHeadUsersidWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling userExistsHeadUsersid.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Head,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find all instances of the model matched by filter from the data source.\n     *\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public userFindWithHttpInfo(filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find a model instance by {{id}} from the data source.\n     *\n     * @param id Model id\n     * @param filter Filter defining fields and include - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public userFindByIdWithHttpInfo(id: string, filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling userFindById.');\n        }\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find first instance of the model matched by filter from the data source.\n     *\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public userFindOneWithHttpInfo(filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/findOne';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Login a user with username/email and password.\n     *\n     * @param credentials\n     * @param include Related objects to include in the response. See the description of return value for more details.\n     */\n    public userLoginWithHttpInfo(credentials: any, include?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/login';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'credentials' is not null or undefined\n        if (credentials === null || credentials === undefined) {\n            throw new Error('Required parameter credentials was null or undefined when calling userLogin.');\n        }\n        if (include !== undefined) {\n            queryParameters.set('include', <any>include);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: credentials == null ? '' : JSON.stringify(credentials), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Logout a user with access token.\n     *\n     */\n    public userLogoutWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/logout';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Patch an existing model instance or insert a new one into the data source.\n     *\n     * @param data Model instance data\n     */\n    public userPatchOrCreateWithHttpInfo(data?: User, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Patch,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Counts accessTokens of User.\n     *\n     * @param id User id\n     * @param where Criteria to match model instances\n     */\n    public userPrototypeCountAccessTokensWithHttpInfo(id: string, where?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/${id}/accessTokens/count'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling userPrototypeCountAccessTokens.');\n        }\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Creates a new instance in accessTokens of this model.\n     *\n     * @param id User id\n     * @param data\n     */\n    public userPrototypeCreateAccessTokensWithHttpInfo(id: string, data?: AccessToken, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/${id}/accessTokens'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling userPrototypeCreateAccessTokens.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Deletes all accessTokens of this model.\n     *\n     * @param id User id\n     */\n    public userPrototypeDeleteAccessTokensWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/${id}/accessTokens'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling userPrototypeDeleteAccessTokens.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Delete,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Delete a related item by id for accessTokens.\n     *\n     * @param fk Foreign key for accessTokens\n     * @param id User id\n     */\n    public userPrototypeDestroyByIdAccessTokensWithHttpInfo(fk: string, id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/${id}/accessTokens/${fk}'\n                    .replace('${' + 'fk' + '}', String(fk))\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'fk' is not null or undefined\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling userPrototypeDestroyByIdAccessTokens.');\n        }\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling userPrototypeDestroyByIdAccessTokens.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Delete,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find a related item by id for accessTokens.\n     *\n     * @param fk Foreign key for accessTokens\n     * @param id User id\n     */\n    public userPrototypeFindByIdAccessTokensWithHttpInfo(fk: string, id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/${id}/accessTokens/${fk}'\n                    .replace('${' + 'fk' + '}', String(fk))\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'fk' is not null or undefined\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling userPrototypeFindByIdAccessTokens.');\n        }\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling userPrototypeFindByIdAccessTokens.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Queries accessTokens of User.\n     *\n     * @param id User id\n     * @param filter\n     */\n    public userPrototypeGetAccessTokensWithHttpInfo(id: string, filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/${id}/accessTokens'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling userPrototypeGetAccessTokens.');\n        }\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Patch attributes for a model instance and persist it into the data source.\n     *\n     * @param id User id\n     * @param data An object of model property name/value pairs\n     */\n    public userPrototypePatchAttributesWithHttpInfo(id: string, data?: User, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling userPrototypePatchAttributes.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Patch,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Update a related item by id for accessTokens.\n     *\n     * @param fk Foreign key for accessTokens\n     * @param id User id\n     * @param data\n     */\n    public userPrototypeUpdateByIdAccessTokensWithHttpInfo(fk: string, id: string, data?: AccessToken, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/${id}/accessTokens/${fk}'\n                    .replace('${' + 'fk' + '}', String(fk))\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'fk' is not null or undefined\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling userPrototypeUpdateByIdAccessTokens.');\n        }\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling userPrototypeUpdateByIdAccessTokens.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Put,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Trigger user&#39;s identity verification with configured verifyOptions\n     *\n     * @param id User id\n     */\n    public userPrototypeVerifyWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/${id}/verify'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling userPrototypeVerify.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace attributes for a model instance and persist it into the data source.\n     *\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public userReplaceByIdPostUsersidReplaceWithHttpInfo(id: string, data?: User, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/${id}/replace'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling userReplaceByIdPostUsersidReplace.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace attributes for a model instance and persist it into the data source.\n     *\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public userReplaceByIdPutUsersidWithHttpInfo(id: string, data?: User, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling userReplaceByIdPutUsersid.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Put,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace an existing model instance or insert a new one into the data source.\n     *\n     * @param data Model instance data\n     */\n    public userReplaceOrCreatePostUsersReplaceOrCreateWithHttpInfo(data?: User, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/replaceOrCreate';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace an existing model instance or insert a new one into the data source.\n     *\n     * @param data Model instance data\n     */\n    public userReplaceOrCreatePutUsersWithHttpInfo(data?: User, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Put,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Reset password for a user with email.\n     *\n     * @param options\n     */\n    public userResetPasswordWithHttpInfo(options: any, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/reset';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'options' is not null or undefined\n        if (options === null || options === undefined) {\n            throw new Error('Required parameter options was null or undefined when calling userResetPassword.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: options == null ? '' : JSON.stringify(options), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Reset user&#39;s password via a password-reset token.\n     *\n     * @param newPassword\n     */\n    public userSetPasswordWithHttpInfo(newPassword: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/reset-password';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'newPassword' is not null or undefined\n        if (newPassword === null || newPassword === undefined) {\n            throw new Error('Required parameter newPassword was null or undefined when calling userSetPassword.');\n        }\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        let canConsumeForm = this.canConsumeForm(consumes);\n        let useForm = false;\n        let formParams = new (useForm ? FormData : URLSearchParams as any)() as {\n          set(param: string, value: any): void;\n        };\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        if (newPassword !== undefined) {\n            formParams.set('newPassword', <any>newPassword);\n        }\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: formParams.toString(),\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Update instances of the model matched by {{where}} from the data source.\n     *\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public userUpdateAllWithHttpInfo(where?: string, data?: User, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/update';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Update an existing model instance or insert a new one into the data source based on the where criteria.\n     *\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public userUpsertWithWhereWithHttpInfo(where?: string, data?: User, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Users/upsertWithWhere';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/swagger/api/user.service.ts","function webpackEmptyAsyncContext(req) {\n\treturn new Promise(function(resolve, reject) { reject(new Error(\"Cannot find module '\" + req + \"'.\")); });\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 149;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/core/@angular lazy\n// module id = 149\n// module chunks = 0","function webpackEmptyAsyncContext(req) {\n\treturn new Promise(function(resolve, reject) { reject(new Error(\"Cannot find module '\" + req + \"'.\")); });\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 190;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src lazy\n// module id = 190\n// module chunks = 0","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/swagger/configuration.ts","import { Component, ViewChild } from '@angular/core';\nimport { NavController, Nav } from 'ionic-angular';\n\nimport { LoginPage } from '../login/login';\nimport { SignupPage } from '../signup/signup';\nimport { DashboardComponent } from '../dashboard/dashboard.component';\nimport { PaymentComponent } from '../payment/payment.component';\n\n\n@Component({\n  selector: 'page-menu',\n  templateUrl: 'menu.html'\n})\nexport class MenuPage {\n  // A reference to the ion-nav in our component\n  @ViewChild(Nav) nav: Nav;\n\n  rootPage: any = DashboardComponent;\n\n  pages: Array<{ title: string, component: any }>;\n\n  constructor(public navCtrl: NavController) {\n    // used for an example of ngFor and navigation\n    this.pages = [\n      { title: 'Dashboard', component: DashboardComponent },\n      { title: 'Payment', component: PaymentComponent },\n      { title: 'Sign in', component: LoginPage },\n      { title: 'Signup', component: SignupPage }\n    ];\n  }\n\n  ionViewDidLoad() {\n    console.log('Hello MenuPage Page');\n  }\n\n  openPage(page) {\n    // Reset the content nav to have just this page\n    // we wouldn't want the back button to show in this scenario\n    this.nav.setRoot(page.component);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/features/menu/menu.ts","import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\n\nimport { LoginPage } from '../login/login';\nimport { SignupPage } from '../signup/signup';\n\n@Component({\n  selector: 'page-welcome',\n  templateUrl: 'welcome.html'\n})\nexport class WelcomePage {\n\n  constructor(public navCtrl: NavController) { }\n\n  login() {\n    this.navCtrl.push(LoginPage);\n  }\n\n  signup() {\n    this.navCtrl.push(SignupPage);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/features/welcome/welcome.ts","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/main.ts","import { NgModule, ErrorHandler } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpModule, Http } from '@angular/http';\nimport { IonicApp, IonicModule, IonicErrorHandler } from 'ionic-angular';\nimport { Storage, IonicStorageModule } from '@ionic/storage';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport * as Chart from 'chart.js';\nimport { ChartsModule } from 'ng2-charts';\nimport { CreditCardDirectivesModule } from 'angular-cc-library';\nimport { MyApp } from './app.component';\n\nimport { LoginPage } from '../features/login/login';\nimport { MenuPage } from '../features/menu/menu';\nimport { SignupPage } from '../features/signup/signup';\nimport { WelcomePage } from '../features/welcome/welcome';\n\nimport { Camera } from '@ionic-native/camera';\nimport { GoogleMaps } from '@ionic-native/google-maps';\nimport { SplashScreen } from '@ionic-native/splash-screen';\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { DashboardComponent } from '../features/dashboard/dashboard.component';\nimport { PaymentComponent } from '../features/payment/payment.component';\nimport { WidgetsModule } from '../widgets/widgets.module';\nimport { FormsModule } from '@angular/forms';\nimport { ApiModule } from '../swagger';\n\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    HttpModule,\n    FormsModule,\n    IonicModule.forRoot(MyApp),\n    IonicStorageModule.forRoot({\n      driverOrder: ['indexeddb', 'sqlite', 'websql'],\n      name: 'btApp',\n      storeName: 'bt_store'\n    }),\n    WidgetsModule,\n    FlexLayoutModule,\n    ChartsModule,\n    CreditCardDirectivesModule,\n    ApiModule\n  ],\n  declarations: [\n    MyApp,\n    LoginPage,\n    MenuPage,\n    SignupPage,\n    WelcomePage,\n    DashboardComponent,\n    PaymentComponent\n  ],\n  providers: [\n    Camera,\n    GoogleMaps,\n    SplashScreen,\n    StatusBar,\n    { provide: ErrorHandler, useClass: IonicErrorHandler }\n  ],\n  exports: [\n    FlexLayoutModule,\n    DashboardComponent,\n    PaymentComponent,\n    ChartsModule,\n    CreditCardDirectivesModule,\n    FormsModule,\n    WidgetsModule,\n    ApiModule\n  ],\n  entryComponents: [\n    MyApp,\n    LoginPage,\n    MenuPage,\n    SignupPage,\n    WelcomePage,\n    DashboardComponent,\n    PaymentComponent\n  ],\n  bootstrap: [IonicApp]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","// RxJS imports according to https://angular.io/docs/ts/latest/guide/server-communication.html#!#rxjs\n\n// See node_module/rxjs/Rxjs.js\n// Import just the rxjs statics and operators we need for THIS app.\n\n// Statics\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/observable/generate';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/observable/combineLatest';\nimport 'rxjs/add/observable/concat';\n\n// Operators\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/concat';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/find';\nimport 'rxjs/add/operator/first';\nimport 'rxjs/add/operator/groupBy';\nimport 'rxjs/add/operator/isEmpty';\nimport 'rxjs/add/operator/last';\nimport 'rxjs/add/operator/merge';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/onErrorResumeNext';\nimport 'rxjs/add/operator/pluck';\nimport 'rxjs/add/operator/retry';\nimport 'rxjs/add/operator/scan';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/takeUntil';\nimport 'rxjs/add/operator/takeWhile';\nimport 'rxjs/add/operator/toPromise';\n\n\n\n// WEBPACK FOOTER //\n// ./src/swagger/rxjs-operators.ts","import { InjectionToken } from '@angular/core';\n\n// Production Env. variables\nexport const environment = 'production';\nexport const env = environment;\nexport const ENV = env;\n\nexport const API_PATH = '/api';\nexport const API_BASE_HOST = 'bt-demo-001.herokuapp.com';\nexport const API_PROTOCOL = 'https';\nexport const API_PORT = null;\nexport const API_BASE_URL = `${API_PROTOCOL}://${API_BASE_HOST}${API_PORT ? ':' + API_PORT : null}${API_PATH}`;\n\nexport const BASE_HOST = 'localhost';\nexport const PROTOCOL = 'http';\nexport const PORT = 4200;\nexport const BASE_URL = `${PROTOCOL}://${BASE_HOST}${PORT ? ':' + PORT : null}`;\n\nexport const BASE_PATH = 'https://bt-demo-001.herokuapp.com/api';\n\n\n\n// WEBPACK FOOTER //\n// ./src/env/environment.ts","var map = {\n\t\"./af\": 246,\n\t\"./af.js\": 246,\n\t\"./ar\": 247,\n\t\"./ar-dz\": 248,\n\t\"./ar-dz.js\": 248,\n\t\"./ar-kw\": 249,\n\t\"./ar-kw.js\": 249,\n\t\"./ar-ly\": 250,\n\t\"./ar-ly.js\": 250,\n\t\"./ar-ma\": 251,\n\t\"./ar-ma.js\": 251,\n\t\"./ar-sa\": 252,\n\t\"./ar-sa.js\": 252,\n\t\"./ar-tn\": 253,\n\t\"./ar-tn.js\": 253,\n\t\"./ar.js\": 247,\n\t\"./az\": 254,\n\t\"./az.js\": 254,\n\t\"./be\": 255,\n\t\"./be.js\": 255,\n\t\"./bg\": 256,\n\t\"./bg.js\": 256,\n\t\"./bn\": 257,\n\t\"./bn.js\": 257,\n\t\"./bo\": 258,\n\t\"./bo.js\": 258,\n\t\"./br\": 259,\n\t\"./br.js\": 259,\n\t\"./bs\": 260,\n\t\"./bs.js\": 260,\n\t\"./ca\": 261,\n\t\"./ca.js\": 261,\n\t\"./cs\": 262,\n\t\"./cs.js\": 262,\n\t\"./cv\": 263,\n\t\"./cv.js\": 263,\n\t\"./cy\": 264,\n\t\"./cy.js\": 264,\n\t\"./da\": 265,\n\t\"./da.js\": 265,\n\t\"./de\": 266,\n\t\"./de-at\": 267,\n\t\"./de-at.js\": 267,\n\t\"./de-ch\": 268,\n\t\"./de-ch.js\": 268,\n\t\"./de.js\": 266,\n\t\"./dv\": 269,\n\t\"./dv.js\": 269,\n\t\"./el\": 270,\n\t\"./el.js\": 270,\n\t\"./en-au\": 271,\n\t\"./en-au.js\": 271,\n\t\"./en-ca\": 272,\n\t\"./en-ca.js\": 272,\n\t\"./en-gb\": 273,\n\t\"./en-gb.js\": 273,\n\t\"./en-ie\": 274,\n\t\"./en-ie.js\": 274,\n\t\"./en-nz\": 275,\n\t\"./en-nz.js\": 275,\n\t\"./eo\": 276,\n\t\"./eo.js\": 276,\n\t\"./es\": 277,\n\t\"./es-do\": 278,\n\t\"./es-do.js\": 278,\n\t\"./es.js\": 277,\n\t\"./et\": 279,\n\t\"./et.js\": 279,\n\t\"./eu\": 280,\n\t\"./eu.js\": 280,\n\t\"./fa\": 281,\n\t\"./fa.js\": 281,\n\t\"./fi\": 282,\n\t\"./fi.js\": 282,\n\t\"./fo\": 283,\n\t\"./fo.js\": 283,\n\t\"./fr\": 284,\n\t\"./fr-ca\": 285,\n\t\"./fr-ca.js\": 285,\n\t\"./fr-ch\": 286,\n\t\"./fr-ch.js\": 286,\n\t\"./fr.js\": 284,\n\t\"./fy\": 287,\n\t\"./fy.js\": 287,\n\t\"./gd\": 288,\n\t\"./gd.js\": 288,\n\t\"./gl\": 289,\n\t\"./gl.js\": 289,\n\t\"./gom-latn\": 290,\n\t\"./gom-latn.js\": 290,\n\t\"./he\": 291,\n\t\"./he.js\": 291,\n\t\"./hi\": 292,\n\t\"./hi.js\": 292,\n\t\"./hr\": 293,\n\t\"./hr.js\": 293,\n\t\"./hu\": 294,\n\t\"./hu.js\": 294,\n\t\"./hy-am\": 295,\n\t\"./hy-am.js\": 295,\n\t\"./id\": 296,\n\t\"./id.js\": 296,\n\t\"./is\": 297,\n\t\"./is.js\": 297,\n\t\"./it\": 298,\n\t\"./it.js\": 298,\n\t\"./ja\": 299,\n\t\"./ja.js\": 299,\n\t\"./jv\": 300,\n\t\"./jv.js\": 300,\n\t\"./ka\": 301,\n\t\"./ka.js\": 301,\n\t\"./kk\": 302,\n\t\"./kk.js\": 302,\n\t\"./km\": 303,\n\t\"./km.js\": 303,\n\t\"./kn\": 304,\n\t\"./kn.js\": 304,\n\t\"./ko\": 305,\n\t\"./ko.js\": 305,\n\t\"./ky\": 306,\n\t\"./ky.js\": 306,\n\t\"./lb\": 307,\n\t\"./lb.js\": 307,\n\t\"./lo\": 308,\n\t\"./lo.js\": 308,\n\t\"./lt\": 309,\n\t\"./lt.js\": 309,\n\t\"./lv\": 310,\n\t\"./lv.js\": 310,\n\t\"./me\": 311,\n\t\"./me.js\": 311,\n\t\"./mi\": 312,\n\t\"./mi.js\": 312,\n\t\"./mk\": 313,\n\t\"./mk.js\": 313,\n\t\"./ml\": 314,\n\t\"./ml.js\": 314,\n\t\"./mr\": 315,\n\t\"./mr.js\": 315,\n\t\"./ms\": 316,\n\t\"./ms-my\": 317,\n\t\"./ms-my.js\": 317,\n\t\"./ms.js\": 316,\n\t\"./my\": 318,\n\t\"./my.js\": 318,\n\t\"./nb\": 319,\n\t\"./nb.js\": 319,\n\t\"./ne\": 320,\n\t\"./ne.js\": 320,\n\t\"./nl\": 321,\n\t\"./nl-be\": 322,\n\t\"./nl-be.js\": 322,\n\t\"./nl.js\": 321,\n\t\"./nn\": 323,\n\t\"./nn.js\": 323,\n\t\"./pa-in\": 324,\n\t\"./pa-in.js\": 324,\n\t\"./pl\": 325,\n\t\"./pl.js\": 325,\n\t\"./pt\": 326,\n\t\"./pt-br\": 327,\n\t\"./pt-br.js\": 327,\n\t\"./pt.js\": 326,\n\t\"./ro\": 328,\n\t\"./ro.js\": 328,\n\t\"./ru\": 329,\n\t\"./ru.js\": 329,\n\t\"./sd\": 330,\n\t\"./sd.js\": 330,\n\t\"./se\": 331,\n\t\"./se.js\": 331,\n\t\"./si\": 332,\n\t\"./si.js\": 332,\n\t\"./sk\": 333,\n\t\"./sk.js\": 333,\n\t\"./sl\": 334,\n\t\"./sl.js\": 334,\n\t\"./sq\": 335,\n\t\"./sq.js\": 335,\n\t\"./sr\": 336,\n\t\"./sr-cyrl\": 337,\n\t\"./sr-cyrl.js\": 337,\n\t\"./sr.js\": 336,\n\t\"./ss\": 338,\n\t\"./ss.js\": 338,\n\t\"./sv\": 339,\n\t\"./sv.js\": 339,\n\t\"./sw\": 340,\n\t\"./sw.js\": 340,\n\t\"./ta\": 341,\n\t\"./ta.js\": 341,\n\t\"./te\": 342,\n\t\"./te.js\": 342,\n\t\"./tet\": 343,\n\t\"./tet.js\": 343,\n\t\"./th\": 344,\n\t\"./th.js\": 344,\n\t\"./tl-ph\": 345,\n\t\"./tl-ph.js\": 345,\n\t\"./tlh\": 346,\n\t\"./tlh.js\": 346,\n\t\"./tr\": 347,\n\t\"./tr.js\": 347,\n\t\"./tzl\": 348,\n\t\"./tzl.js\": 348,\n\t\"./tzm\": 349,\n\t\"./tzm-latn\": 350,\n\t\"./tzm-latn.js\": 350,\n\t\"./tzm.js\": 349,\n\t\"./uk\": 351,\n\t\"./uk.js\": 351,\n\t\"./ur\": 352,\n\t\"./ur.js\": 352,\n\t\"./uz\": 353,\n\t\"./uz-latn\": 354,\n\t\"./uz-latn.js\": 354,\n\t\"./uz.js\": 353,\n\t\"./vi\": 355,\n\t\"./vi.js\": 355,\n\t\"./x-pseudo\": 356,\n\t\"./x-pseudo.js\": 356,\n\t\"./yo\": 357,\n\t\"./yo.js\": 357,\n\t\"./zh-cn\": 358,\n\t\"./zh-cn.js\": 358,\n\t\"./zh-hk\": 359,\n\t\"./zh-hk.js\": 359,\n\t\"./zh-tw\": 360,\n\t\"./zh-tw.js\": 360\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 473;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/moment/locale ^\\.\\/.*$\n// module id = 473\n// module chunks = 0","import { Component, ViewChild } from '@angular/core';\nimport { Platform, Nav, Config } from 'ionic-angular';\n\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { SplashScreen } from '@ionic-native/splash-screen';\n\nimport { LoginPage } from '../features/login/login';\nimport { SignupPage } from '../features/signup/signup';\nimport { WelcomePage } from '../features/welcome/welcome';\nimport { DashboardComponent } from '../features/dashboard/dashboard.component';\nimport { PaymentComponent } from '../features/payment/payment.component';\nimport { environment } from '../env/environment';\n\n@Component({\n  templateUrl: 'app.template.html'\n})\nexport class MyApp {\n\n  @ViewChild(Nav) nav: Nav;\n  public rootPage = WelcomePage;\n  public pages: any[] = [\n    { title: 'Dashboard', component: DashboardComponent },\n    { title: 'Payment', component: PaymentComponent },\n    { title: 'Login', component: LoginPage },\n    { title: 'Signup', component: SignupPage }\n  ]\n\n  constructor(\n    private platform: Platform,\n    private config: Config,\n    private statusBar: StatusBar,\n    private splashScreen: SplashScreen) {\n\n  }\n\n  ionViewDidLoad() {\n    this.platform.ready().then((readySource) => {\n\n      if (readySource === 'cordova') {\n        this.statusBar.styleDefault();\n        this.splashScreen.hide();\n      }\n    });\n  }\n\n  public openPage(page) {\n    this.nav.setRoot(page.component);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { BgColorDirective } from './bg-color.directive';\nimport { ServerError } from './pages/servererror.component';\nimport { MethodNotAllowed } from './pages/methodnotallowed.component';\nimport { PageNotFound } from './pages/pagenotfound.component';\nimport { Unauthorized } from './pages/unauthorized.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  declarations: [\n    BgColorDirective,\n    ServerError,\n    MethodNotAllowed,\n    PageNotFound,\n    Unauthorized\n  ],\n  exports: [\n    CommonModule,\n    FormsModule,\n    BgColorDirective\n\n  ],\n  entryComponents: [\n    ServerError,\n    MethodNotAllowed,\n    PageNotFound,\n    Unauthorized\n  ],\n})\nexport class WidgetsModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/widgets/widgets.module.ts","import { AfterViewInit, Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[BgColor]'\n})\nexport class BgColorDirective implements AfterViewInit {\n\n  @Input('dohcBgColor') bgColor: string;\n  @Input() public colorShade: number;\n\n  /* tslint:disable:no-bitwise */\n\n  public static getContrastColor(hexcolor) {\n    const color = hexcolor.length > 6 ? hexcolor.substr(1) : hexcolor;\n    const r = parseInt(color.substr(0, 2), 16);\n    const g = parseInt(color.substr(2, 2), 16);\n    const b = parseInt(color.substr(4, 2), 16);\n    const yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;\n    return (yiq >= 128) ? '#222222' : '#ffffff';\n  }\n  // valid range for percent is -1.0 to 1.0.\n\n  public static shadeHexColor (hex, percent) {\n    const color = hex.length === 6 ? '#' + hex : hex;\n    const f = parseInt(color.slice(1), 16),\n      t = percent < 0 ? 0 : 255,\n      p = percent < 0 ? percent * -1 : percent,\n      R = f >> 16,\n      G = f >> 8 & 0x00FF,\n      B = f & 0x0000FF;\n\n    return '#' + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 +\n      (Math.round((t - G) * p) + G) * 0x100 +\n      (Math.round((t - B) * p) + B)).toString(16).slice(1);\n  }\n\n  public static blendHexColors (c0, c1, p) {\n    const f = parseInt(c0.slice(1), 16),\n      t = parseInt(c1.slice(1), 16),\n      R1 = f >> 16,\n      G1 = f >> 8 & 0x00FF,\n      B1 = f & 0x0000FF,\n      R2 = t >> 16,\n      G2 = t >> 8 & 0x00FF,\n      B2 = t & 0x0000FF;\n    return '#' + (0x1000000 + (Math.round((R2 - R1) * p) + R1) * 0x10000 +\n      (Math.round((G2 - G1) * p) + G1) * 0x100 +\n      (Math.round((B2 - B1) * p) + B1)).toString(16).slice(1);\n  }\n  public static shadeRGBColor (color, percent) {\n    const f = color.split(','),\n      t = percent < 0 ? 0 : 255,\n      p = percent < 0 ? percent * -1 : percent,\n      R = parseInt(f[0].slice(4), 10),\n      G = parseInt(f[1], 10),\n      B = parseInt(f[2], 10);\n    return 'rgb(' + (Math.round((t - R) * p) + R) + ',' +\n      (Math.round((t - G) * p) + G) + ',' +\n      (Math.round((t - B) * p) + B) + ')';\n  }\n  public static blendRGBColors (c0, c1, p) {\n    const f = c0.split(','),\n      t = c1.split(','),\n      R = parseInt(f[0].slice(4), 10),\n      G = parseInt(f[1], 10),\n      B = parseInt(f[2], 10);\n    return 'rgb(' + (Math.round((parseInt(t[0].slice(4), 10) - R) * p) + R) + ',' +\n      (Math.round((parseInt(t[1], 10) - G) * p) + G) + ',' +\n      (Math.round((parseInt(t[2], 10) - B) * p) + B) + ')';\n  }\n\n  constructor (private el: ElementRef) {\n\n  }\n\n  ngAfterViewInit () {\n    const shade = (this.colorShade && this.colorShade <= 1 && this.colorShade >= -1) ? this.colorShade : 0;\n    const color = BgColorDirective.shadeHexColor(this.bgColor, shade);\n    this.el.nativeElement.style.backgroundColor = color;\n    this.el.nativeElement.style.borderLeftColor = BgColorDirective.shadeHexColor(color, 0.5);\n    this.el.nativeElement.style.borderTopColor = BgColorDirective.shadeHexColor(color, 0.5);\n    this.el.nativeElement.style.borderRightColor = BgColorDirective.shadeHexColor(color, 0.3);\n    this.el.nativeElement.style.borderBottomColor = BgColorDirective.shadeHexColor(color, 0.3);\n    this.el.nativeElement.style.color = BgColorDirective.getContrastColor(color);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/widgets/bg-color.directive.ts","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'bot-servererror',\n  templateUrl: './servererror.template.html'\n})\n\nexport class ServerError {\n\n  constructor () {\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/widgets/pages/servererror.component.ts","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'bot-notallowed',\n  templateUrl: './methodnotallowed.template.html'\n})\n\nexport class MethodNotAllowed {\n\n  constructor () {\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/widgets/pages/methodnotallowed.component.ts","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'bot-pagenotfound',\n  templateUrl: './pagenotfound.template.html'\n})\n\nexport class PageNotFound {\n\n  constructor () {\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/widgets/pages/pagenotfound.component.ts","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'bot-unauth',\n  templateUrl: './unauthorized.template.html'\n})\n\nexport class Unauthorized {\n\n  constructor () {\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/widgets/pages/unauthorized.component.ts","export * from './api/api';\nexport * from './model/models';\nexport * from './variables';\nexport * from './configuration';\nexport * from './api.module';\n\n\n// WEBPACK FOOTER //\n// ./src/swagger/index.ts","export * from './company.service';\nimport { CompanyService } from './company.service';\nexport * from './employee.service';\nimport { EmployeeService } from './employee.service';\nexport * from './entity.service';\nimport { EntityService } from './entity.service';\nexport * from './entityType.service';\nimport { EntityTypeService } from './entityType.service';\nexport * from './transaction.service';\nimport { TransactionService } from './transaction.service';\nexport * from './transactionType.service';\nimport { TransactionTypeService } from './transactionType.service';\nexport * from './user.service';\nimport { UserService } from './user.service';\nexport const APIS = [CompanyService, EmployeeService, EntityService, EntityTypeService, TransactionService, TransactionTypeService, UserService];\n\n\n\n// WEBPACK FOOTER //\n// ./src/swagger/api/api.ts","import { InjectionToken } from '@angular/core';\nimport { BASE_PATH } from '../env/environment';\n\n\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/swagger/variables.ts","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpModule } from '@angular/http';\nimport { Configuration } from './configuration';\n\nimport { CompanyService } from './api/company.service';\nimport { EmployeeService } from './api/employee.service';\nimport { EntityService } from './api/entity.service';\nimport { EntityTypeService } from './api/entityType.service';\nimport { TransactionService } from './api/transaction.service';\nimport { TransactionTypeService } from './api/transactionType.service';\nimport { UserService } from './api/user.service';\n\n@NgModule({\n  imports:      [ CommonModule, HttpModule ],\n  declarations: [],\n  exports:      [],\n  providers:    [ CompanyService, EmployeeService, EntityService, EntityTypeService, TransactionService, TransactionTypeService, UserService ]\n})\nexport class ApiModule {\n    public static forConfig(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ {provide: Configuration, useFactory: configurationFactory}]\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/swagger/api.module.ts","import { Component } from '@angular/core';\nimport { NavController, ToastController } from 'ionic-angular';\nimport { SignupPage } from '../signup/signup';\nimport { MenuPage } from '../menu/menu';\nimport { EmployeeService } from '../../swagger/api/employee.service';\n\nconst TWO_WEEKS = 60 * 60 * 24 * 7 * 2;\n\n@Component({\n  selector: 'page-login',\n  templateUrl: 'login.html'\n})\nexport class LoginPage {\n\n  public static title = 'Login';\n  public credentials = {\n    email: '',\n    password: '',\n    ttl: TWO_WEEKS\n  };\n\n  constructor(public navCtrl: NavController, public toastCtrl: ToastController,\n              private empService: EmployeeService) {\n\n  }\n\n  public gotoSignup (event) {\n    this.navCtrl.push(SignupPage);\n  }\n\n  private _loginSuccess() {\n    const toast = this.toastCtrl.create({\n      message: 'Successfully logged in!',\n      duration: 3000,\n      position: 'bottom'\n    });\n    toast.present();\n  }\n\n  private _loginError (errMsg: string): void {\n    const toast = this.toastCtrl.create({\n      message: errMsg,\n      duration: 3000,\n      position: 'bottom'\n    });\n    toast.present();\n  }\n\n  public doLogin() {\n    this.empService.employeeLogin(this.credentials, 'User').map(res => {\n      const token = res.id;\n      const profile = res.user;\n      this._loginSuccess();\n      this.navCtrl.push(MenuPage);\n      return res;\n    }).catch(err => {\n      this._loginError(err);\n      return err;\n    }).subscribe();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/features/login/login.ts","import { Component } from '@angular/core';\nimport { NavController, ToastController } from 'ionic-angular';\nimport { LoginPage } from '../login/login';\nimport { MenuPage } from '../menu/menu';\nimport { EmployeeService } from '../../swagger/api/employee.service';\n\n\n\n@Component({\n  selector: 'page-signup',\n  templateUrl: 'signup.html'\n})\nexport class SignupPage {\n\n  public static title = 'Signup';\n  public credentials = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: ''\n  };\n\n  constructor(public navCtrl: NavController, public toastCtrl: ToastController,\n              private empService: EmployeeService) {\n\n  }\n\n  public gotoLogin (event) {\n    this.navCtrl.push(LoginPage);\n  }\n\n  private _signupSuccess () {\n    const toast = this.toastCtrl.create({\n      message: 'Successfully signed up!',\n      duration: 3000,\n      position: 'bottom'\n    });\n    toast.present();\n  }\n\n  private _signupError (errMsg: string): void {\n    const toast = this.toastCtrl.create({\n      message: errMsg,\n      duration: 3000,\n      position: 'bottom'\n    });\n    toast.present();\n  }\n\n  doSignup() {\n    this.empService.employeeCreate(this.credentials).map(res => {\n      const profile = res;\n      this._signupSuccess();\n      this.navCtrl.push(LoginPage);\n    }).catch(err => {\n      this._signupError(err);\n      return err;\n    }).subscribe();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/features/signup/signup.ts","/**\n * bt-server\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.0.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { Http, Headers, URLSearchParams }                    from '@angular/http';\nimport { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';\nimport { Response, ResponseContentType }                     from '@angular/http';\n\nimport { Observable }                                        from 'rxjs/Observable';\nimport '../rxjs-operators';\n\nimport { AccessToken } from '../model/accessToken';\nimport { Address } from '../model/address';\nimport { Company } from '../model/company';\nimport { Employee } from '../model/employee';\nimport { InlineResponse200 } from '../model/inlineResponse200';\nimport { InlineResponse2001 } from '../model/inlineResponse2001';\nimport { InlineResponse2002 } from '../model/inlineResponse2002';\n\nimport { COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\nimport { BASE_PATH } from '../../env/environment';\n\n\n@Injectable()\nexport class EmployeeService {\n\n    protected basePath = 'https://bt-demo-001.herokuapp.com/api';\n    public defaultHeaders: Headers = new Headers();\n    public configuration: Configuration = new Configuration();\n\n    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n\t\t\tthis.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     *\n     * Extends object by coping non-existing properties.\n     * @param objA object to be extended\n     * @param objB source object\n     */\n    private extendObj<T1,T2>(objA: T1, objB: T2) {\n        for(let key in objB){\n            if(objB.hasOwnProperty(key)){\n                (objA as any)[key] = (objB as any)[key];\n            }\n        }\n        return <T1&T2>objA;\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     *\n     * @summary Change a user's password.\n     * @param oldPassword\n     * @param newPassword\n     */\n    public employeeChangePassword(oldPassword: string, newPassword: string, extraHttpRequestParams?: any): Observable<{}> {\n        return this.employeeChangePasswordWithHttpInfo(oldPassword, newPassword, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Confirm a user registration with identity verification token.\n     * @param uid\n     * @param token\n     * @param redirect\n     */\n    public employeeConfirm(uid: string, token: string, redirect?: string, extraHttpRequestParams?: any): Observable<{}> {\n        return this.employeeConfirmWithHttpInfo(uid, token, redirect, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Count instances of the model matched by where from the data source.\n     * @param where Criteria to match model instances\n     */\n    public employeeCount(where?: string, extraHttpRequestParams?: any): Observable<InlineResponse200> {\n        return this.employeeCountWithHttpInfo(where, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Create a new instance of the model and persist it into the data source.\n     * @param data Model instance data\n     */\n    public employeeCreate(data?: Employee, extraHttpRequestParams?: any): Observable<Employee> {\n        return this.employeeCreateWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Create a change stream.\n     * @param options\n     */\n    public employeeCreateChangeStreamGetEmployeesChangeStream(options?: string, extraHttpRequestParams?: any): Observable<Blob|undefined> {\n        return this.employeeCreateChangeStreamGetEmployeesChangeStreamWithHttpInfo(options, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.blob();\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Create a change stream.\n     * @param options\n     */\n    public employeeCreateChangeStreamPostEmployeesChangeStream(options?: string, extraHttpRequestParams?: any): Observable<Blob|undefined> {\n        return this.employeeCreateChangeStreamPostEmployeesChangeStreamWithHttpInfo(options, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.blob();\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Delete a model instance by {{id}} from the data source.\n     * @param id Model id\n     */\n    public employeeDeleteById(id: string, extraHttpRequestParams?: any): Observable<any> {\n        return this.employeeDeleteByIdWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Check whether a model instance exists in the data source.\n     * @param id Model id\n     */\n    public employeeExistsGetEmployeesidExists(id: string, extraHttpRequestParams?: any): Observable<InlineResponse2001> {\n        return this.employeeExistsGetEmployeesidExistsWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Check whether a model instance exists in the data source.\n     * @param id Model id\n     */\n    public employeeExistsHeadEmployeesid(id: string, extraHttpRequestParams?: any): Observable<InlineResponse2001> {\n        return this.employeeExistsHeadEmployeesidWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find all instances of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public employeeFind(filter?: string, extraHttpRequestParams?: any): Observable<Array<Employee>> {\n        return this.employeeFindWithHttpInfo(filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find a model instance by {{id}} from the data source.\n     * @param id Model id\n     * @param filter Filter defining fields and include - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public employeeFindById(id: string, filter?: string, extraHttpRequestParams?: any): Observable<Employee> {\n        return this.employeeFindByIdWithHttpInfo(id, filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find first instance of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public employeeFindOne(filter?: string, extraHttpRequestParams?: any): Observable<Employee> {\n        return this.employeeFindOneWithHttpInfo(filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Login a user with username/email and password.\n     * @param credentials\n     * @param include Related objects to include in the response. See the description of return value for more details.\n     */\n    public employeeLogin(credentials: any, include?: string, extraHttpRequestParams?: any): Observable<any> {\n        return this.employeeLoginWithHttpInfo(credentials, include, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Logout a user with access token.\n     */\n    public employeeLogout(extraHttpRequestParams?: any): Observable<{}> {\n        return this.employeeLogoutWithHttpInfo(extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Patch an existing model instance or insert a new one into the data source.\n     * @param data Model instance data\n     */\n    public employeePatchOrCreate(data?: Employee, extraHttpRequestParams?: any): Observable<Employee> {\n        return this.employeePatchOrCreateWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Counts accessTokens of Employee.\n     * @param id Employee id\n     * @param where Criteria to match model instances\n     */\n    public employeePrototypeCountAccessTokens(id: string, where?: string, extraHttpRequestParams?: any): Observable<InlineResponse200> {\n        return this.employeePrototypeCountAccessTokensWithHttpInfo(id, where, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Creates a new instance in accessTokens of this model.\n     * @param id Employee id\n     * @param data\n     */\n    public employeePrototypeCreateAccessTokens(id: string, data?: AccessToken, extraHttpRequestParams?: any): Observable<AccessToken> {\n        return this.employeePrototypeCreateAccessTokensWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Creates a new instance in address of this model.\n     * @param id Employee id\n     * @param data\n     */\n    public employeePrototypeCreateAddress(id: string, data?: Address, extraHttpRequestParams?: any): Observable<Address> {\n        return this.employeePrototypeCreateAddressWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Deletes all accessTokens of this model.\n     * @param id Employee id\n     */\n    public employeePrototypeDeleteAccessTokens(id: string, extraHttpRequestParams?: any): Observable<{}> {\n        return this.employeePrototypeDeleteAccessTokensWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Deletes address of this model.\n     * @param id Employee id\n     */\n    public employeePrototypeDestroyAddress(id: string, extraHttpRequestParams?: any): Observable<{}> {\n        return this.employeePrototypeDestroyAddressWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Delete a related item by id for accessTokens.\n     * @param fk Foreign key for accessTokens\n     * @param id Employee id\n     */\n    public employeePrototypeDestroyByIdAccessTokens(fk: string, id: string, extraHttpRequestParams?: any): Observable<{}> {\n        return this.employeePrototypeDestroyByIdAccessTokensWithHttpInfo(fk, id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Find a related item by id for accessTokens.\n     * @param fk Foreign key for accessTokens\n     * @param id Employee id\n     */\n    public employeePrototypeFindByIdAccessTokens(fk: string, id: string, extraHttpRequestParams?: any): Observable<AccessToken> {\n        return this.employeePrototypeFindByIdAccessTokensWithHttpInfo(fk, id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Queries accessTokens of Employee.\n     * @param id Employee id\n     * @param filter\n     */\n    public employeePrototypeGetAccessTokens(id: string, filter?: string, extraHttpRequestParams?: any): Observable<Array<AccessToken>> {\n        return this.employeePrototypeGetAccessTokensWithHttpInfo(id, filter, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Fetches hasOne relation address.\n     * @param id Employee id\n     * @param refresh\n     */\n    public employeePrototypeGetAddress(id: string, refresh?: boolean, extraHttpRequestParams?: any): Observable<Address> {\n        return this.employeePrototypeGetAddressWithHttpInfo(id, refresh, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Fetches belongsTo relation company.\n     * @param id Employee id\n     * @param refresh\n     */\n    public employeePrototypeGetCompany(id: string, refresh?: boolean, extraHttpRequestParams?: any): Observable<Company> {\n        return this.employeePrototypeGetCompanyWithHttpInfo(id, refresh, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Patch attributes for a model instance and persist it into the data source.\n     * @param id Employee id\n     * @param data An object of model property name/value pairs\n     */\n    public employeePrototypePatchAttributes(id: string, data?: Employee, extraHttpRequestParams?: any): Observable<Employee> {\n        return this.employeePrototypePatchAttributesWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Update address of this model.\n     * @param id Employee id\n     * @param data\n     */\n    public employeePrototypeUpdateAddress(id: string, data?: Address, extraHttpRequestParams?: any): Observable<Address> {\n        return this.employeePrototypeUpdateAddressWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Update a related item by id for accessTokens.\n     * @param fk Foreign key for accessTokens\n     * @param id Employee id\n     * @param data\n     */\n    public employeePrototypeUpdateByIdAccessTokens(fk: string, id: string, data?: AccessToken, extraHttpRequestParams?: any): Observable<AccessToken> {\n        return this.employeePrototypeUpdateByIdAccessTokensWithHttpInfo(fk, id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Trigger user's identity verification with configured verifyOptions\n     * @param id Employee id\n     */\n    public employeePrototypeVerify(id: string, extraHttpRequestParams?: any): Observable<{}> {\n        return this.employeePrototypeVerifyWithHttpInfo(id, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace attributes for a model instance and persist it into the data source.\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public employeeReplaceByIdPostEmployeesidReplace(id: string, data?: Employee, extraHttpRequestParams?: any): Observable<Employee> {\n        return this.employeeReplaceByIdPostEmployeesidReplaceWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace attributes for a model instance and persist it into the data source.\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public employeeReplaceByIdPutEmployeesid(id: string, data?: Employee, extraHttpRequestParams?: any): Observable<Employee> {\n        return this.employeeReplaceByIdPutEmployeesidWithHttpInfo(id, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace an existing model instance or insert a new one into the data source.\n     * @param data Model instance data\n     */\n    public employeeReplaceOrCreatePostEmployeesReplaceOrCreate(data?: Employee, extraHttpRequestParams?: any): Observable<Employee> {\n        return this.employeeReplaceOrCreatePostEmployeesReplaceOrCreateWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Replace an existing model instance or insert a new one into the data source.\n     * @param data Model instance data\n     */\n    public employeeReplaceOrCreatePutEmployees(data?: Employee, extraHttpRequestParams?: any): Observable<Employee> {\n        return this.employeeReplaceOrCreatePutEmployeesWithHttpInfo(data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Reset password for a user with email.\n     * @param options\n     */\n    public employeeResetPassword(options: any, extraHttpRequestParams?: any): Observable<{}> {\n        return this.employeeResetPasswordWithHttpInfo(options, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Reset user's password via a password-reset token.\n     * @param newPassword\n     */\n    public employeeSetPassword(newPassword: string, extraHttpRequestParams?: any): Observable<{}> {\n        return this.employeeSetPasswordWithHttpInfo(newPassword, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Update instances of the model matched by {{where}} from the data source.\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public employeeUpdateAll(where?: string, data?: Employee, extraHttpRequestParams?: any): Observable<InlineResponse2002> {\n        return this.employeeUpdateAllWithHttpInfo(where, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n    /**\n     *\n     * @summary Update an existing model instance or insert a new one into the data source based on the where criteria.\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public employeeUpsertWithWhere(where?: string, data?: Employee, extraHttpRequestParams?: any): Observable<Employee> {\n        return this.employeeUpsertWithWhereWithHttpInfo(where, data, extraHttpRequestParams)\n            .map((response: Response) => {\n                if (response.status === 204) {\n                    return undefined;\n                } else {\n                    return response.json() || {};\n                }\n            });\n    }\n\n\n    /**\n     * Change a user&#39;s password.\n     *\n     * @param oldPassword\n     * @param newPassword\n     */\n    public employeeChangePasswordWithHttpInfo(oldPassword: string, newPassword: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/change-password';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'oldPassword' is not null or undefined\n        if (oldPassword === null || oldPassword === undefined) {\n            throw new Error('Required parameter oldPassword was null or undefined when calling employeeChangePassword.');\n        }\n        // verify required parameter 'newPassword' is not null or undefined\n        if (newPassword === null || newPassword === undefined) {\n            throw new Error('Required parameter newPassword was null or undefined when calling employeeChangePassword.');\n        }\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        let canConsumeForm = this.canConsumeForm(consumes);\n        let useForm = false;\n        let formParams = new (useForm ? FormData : URLSearchParams as any)() as {\n          set(param: string, value: any): void;\n        };\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        if (oldPassword !== undefined) {\n            formParams.set('oldPassword', <any>oldPassword);\n        }\n\n        if (newPassword !== undefined) {\n            formParams.set('newPassword', <any>newPassword);\n        }\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: formParams.toString(),\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Confirm a user registration with identity verification token.\n     *\n     * @param uid\n     * @param token\n     * @param redirect\n     */\n    public employeeConfirmWithHttpInfo(uid: string, token: string, redirect?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/confirm';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'uid' is not null or undefined\n        if (uid === null || uid === undefined) {\n            throw new Error('Required parameter uid was null or undefined when calling employeeConfirm.');\n        }\n        // verify required parameter 'token' is not null or undefined\n        if (token === null || token === undefined) {\n            throw new Error('Required parameter token was null or undefined when calling employeeConfirm.');\n        }\n        if (uid !== undefined) {\n            queryParameters.set('uid', <any>uid);\n        }\n\n        if (token !== undefined) {\n            queryParameters.set('token', <any>token);\n        }\n\n        if (redirect !== undefined) {\n            queryParameters.set('redirect', <any>redirect);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Count instances of the model matched by where from the data source.\n     *\n     * @param where Criteria to match model instances\n     */\n    public employeeCountWithHttpInfo(where?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/count';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Create a new instance of the model and persist it into the data source.\n     *\n     * @param data Model instance data\n     */\n    public employeeCreateWithHttpInfo(data?: Employee, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Create a change stream.\n     *\n     * @param options\n     */\n    public employeeCreateChangeStreamGetEmployeesChangeStreamWithHttpInfo(options?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/change-stream';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (options !== undefined) {\n            queryParameters.set('options', <any>options);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            responseType: ResponseContentType.Blob,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Create a change stream.\n     *\n     * @param options\n     */\n    public employeeCreateChangeStreamPostEmployeesChangeStreamWithHttpInfo(options?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/change-stream';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        let canConsumeForm = this.canConsumeForm(consumes);\n        let useForm = false;\n        let formParams = new (useForm ? FormData : URLSearchParams as any)() as {\n          set(param: string, value: any): void;\n        };\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        if (options !== undefined) {\n            formParams.set('options', <any>options);\n        }\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: formParams.toString(),\n            responseType: ResponseContentType.Blob,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Delete a model instance by {{id}} from the data source.\n     *\n     * @param id Model id\n     */\n    public employeeDeleteByIdWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeeDeleteById.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Delete,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Check whether a model instance exists in the data source.\n     *\n     * @param id Model id\n     */\n    public employeeExistsGetEmployeesidExistsWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}/exists'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeeExistsGetEmployeesidExists.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Check whether a model instance exists in the data source.\n     *\n     * @param id Model id\n     */\n    public employeeExistsHeadEmployeesidWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeeExistsHeadEmployeesid.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Head,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find all instances of the model matched by filter from the data source.\n     *\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public employeeFindWithHttpInfo(filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find a model instance by {{id}} from the data source.\n     *\n     * @param id Model id\n     * @param filter Filter defining fields and include - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public employeeFindByIdWithHttpInfo(id: string, filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeeFindById.');\n        }\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find first instance of the model matched by filter from the data source.\n     *\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     */\n    public employeeFindOneWithHttpInfo(filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/findOne';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Login a user with username/email and password.\n     *\n     * @param credentials\n     * @param include Related objects to include in the response. See the description of return value for more details.\n     */\n    public employeeLoginWithHttpInfo(credentials: any, include?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/login';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'credentials' is not null or undefined\n        if (credentials === null || credentials === undefined) {\n            throw new Error('Required parameter credentials was null or undefined when calling employeeLogin.');\n        }\n        if (include !== undefined) {\n            queryParameters.set('include', <any>include);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: credentials == null ? '' : JSON.stringify(credentials), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Logout a user with access token.\n     *\n     */\n    public employeeLogoutWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/logout';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Patch an existing model instance or insert a new one into the data source.\n     *\n     * @param data Model instance data\n     */\n    public employeePatchOrCreateWithHttpInfo(data?: Employee, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Patch,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Counts accessTokens of Employee.\n     *\n     * @param id Employee id\n     * @param where Criteria to match model instances\n     */\n    public employeePrototypeCountAccessTokensWithHttpInfo(id: string, where?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}/accessTokens/count'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeePrototypeCountAccessTokens.');\n        }\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Creates a new instance in accessTokens of this model.\n     *\n     * @param id Employee id\n     * @param data\n     */\n    public employeePrototypeCreateAccessTokensWithHttpInfo(id: string, data?: AccessToken, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}/accessTokens'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeePrototypeCreateAccessTokens.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Creates a new instance in address of this model.\n     *\n     * @param id Employee id\n     * @param data\n     */\n    public employeePrototypeCreateAddressWithHttpInfo(id: string, data?: Address, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}/address'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeePrototypeCreateAddress.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Deletes all accessTokens of this model.\n     *\n     * @param id Employee id\n     */\n    public employeePrototypeDeleteAccessTokensWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}/accessTokens'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeePrototypeDeleteAccessTokens.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Delete,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Deletes address of this model.\n     *\n     * @param id Employee id\n     */\n    public employeePrototypeDestroyAddressWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}/address'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeePrototypeDestroyAddress.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Delete,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Delete a related item by id for accessTokens.\n     *\n     * @param fk Foreign key for accessTokens\n     * @param id Employee id\n     */\n    public employeePrototypeDestroyByIdAccessTokensWithHttpInfo(fk: string, id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}/accessTokens/${fk}'\n                    .replace('${' + 'fk' + '}', String(fk))\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'fk' is not null or undefined\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling employeePrototypeDestroyByIdAccessTokens.');\n        }\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeePrototypeDestroyByIdAccessTokens.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Delete,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Find a related item by id for accessTokens.\n     *\n     * @param fk Foreign key for accessTokens\n     * @param id Employee id\n     */\n    public employeePrototypeFindByIdAccessTokensWithHttpInfo(fk: string, id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}/accessTokens/${fk}'\n                    .replace('${' + 'fk' + '}', String(fk))\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'fk' is not null or undefined\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling employeePrototypeFindByIdAccessTokens.');\n        }\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeePrototypeFindByIdAccessTokens.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Queries accessTokens of Employee.\n     *\n     * @param id Employee id\n     * @param filter\n     */\n    public employeePrototypeGetAccessTokensWithHttpInfo(id: string, filter?: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}/accessTokens'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeePrototypeGetAccessTokens.');\n        }\n        if (filter !== undefined) {\n            queryParameters.set('filter', <any>filter);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Fetches hasOne relation address.\n     *\n     * @param id Employee id\n     * @param refresh\n     */\n    public employeePrototypeGetAddressWithHttpInfo(id: string, refresh?: boolean, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}/address'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeePrototypeGetAddress.');\n        }\n        if (refresh !== undefined) {\n            queryParameters.set('refresh', <any>refresh);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Fetches belongsTo relation company.\n     *\n     * @param id Employee id\n     * @param refresh\n     */\n    public employeePrototypeGetCompanyWithHttpInfo(id: string, refresh?: boolean, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}/company'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeePrototypeGetCompany.');\n        }\n        if (refresh !== undefined) {\n            queryParameters.set('refresh', <any>refresh);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Patch attributes for a model instance and persist it into the data source.\n     *\n     * @param id Employee id\n     * @param data An object of model property name/value pairs\n     */\n    public employeePrototypePatchAttributesWithHttpInfo(id: string, data?: Employee, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeePrototypePatchAttributes.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Patch,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Update address of this model.\n     *\n     * @param id Employee id\n     * @param data\n     */\n    public employeePrototypeUpdateAddressWithHttpInfo(id: string, data?: Address, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}/address'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeePrototypeUpdateAddress.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Put,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Update a related item by id for accessTokens.\n     *\n     * @param fk Foreign key for accessTokens\n     * @param id Employee id\n     * @param data\n     */\n    public employeePrototypeUpdateByIdAccessTokensWithHttpInfo(fk: string, id: string, data?: AccessToken, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}/accessTokens/${fk}'\n                    .replace('${' + 'fk' + '}', String(fk))\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'fk' is not null or undefined\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling employeePrototypeUpdateByIdAccessTokens.');\n        }\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeePrototypeUpdateByIdAccessTokens.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Put,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Trigger user&#39;s identity verification with configured verifyOptions\n     *\n     * @param id Employee id\n     */\n    public employeePrototypeVerifyWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}/verify'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeePrototypeVerify.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace attributes for a model instance and persist it into the data source.\n     *\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public employeeReplaceByIdPostEmployeesidReplaceWithHttpInfo(id: string, data?: Employee, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}/replace'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeeReplaceByIdPostEmployeesidReplace.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace attributes for a model instance and persist it into the data source.\n     *\n     * @param id Model id\n     * @param data Model instance data\n     */\n    public employeeReplaceByIdPutEmployeesidWithHttpInfo(id: string, data?: Employee, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/${id}'\n                    .replace('${' + 'id' + '}', String(id));\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling employeeReplaceByIdPutEmployeesid.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Put,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace an existing model instance or insert a new one into the data source.\n     *\n     * @param data Model instance data\n     */\n    public employeeReplaceOrCreatePostEmployeesReplaceOrCreateWithHttpInfo(data?: Employee, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/replaceOrCreate';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Replace an existing model instance or insert a new one into the data source.\n     *\n     * @param data Model instance data\n     */\n    public employeeReplaceOrCreatePutEmployeesWithHttpInfo(data?: Employee, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Put,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Reset password for a user with email.\n     *\n     * @param options\n     */\n    public employeeResetPasswordWithHttpInfo(options: any, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/reset';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'options' is not null or undefined\n        if (options === null || options === undefined) {\n            throw new Error('Required parameter options was null or undefined when calling employeeResetPassword.');\n        }\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: options == null ? '' : JSON.stringify(options), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Reset user&#39;s password via a password-reset token.\n     *\n     * @param newPassword\n     */\n    public employeeSetPasswordWithHttpInfo(newPassword: string, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/reset-password';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        // verify required parameter 'newPassword' is not null or undefined\n        if (newPassword === null || newPassword === undefined) {\n            throw new Error('Required parameter newPassword was null or undefined when calling employeeSetPassword.');\n        }\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        let canConsumeForm = this.canConsumeForm(consumes);\n        let useForm = false;\n        let formParams = new (useForm ? FormData : URLSearchParams as any)() as {\n          set(param: string, value: any): void;\n        };\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        if (newPassword !== undefined) {\n            formParams.set('newPassword', <any>newPassword);\n        }\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: formParams.toString(),\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Update instances of the model matched by {{where}} from the data source.\n     *\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public employeeUpdateAllWithHttpInfo(where?: string, data?: Employee, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/update';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Update an existing model instance or insert a new one into the data source based on the where criteria.\n     *\n     * @param where Criteria to match model instances\n     * @param data An object of model property name/value pairs\n     */\n    public employeeUpsertWithWhereWithHttpInfo(where?: string, data?: Employee, extraHttpRequestParams?: any): Observable<Response> {\n        const path = this.basePath + '/Employees/upsertWithWhere';\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n        if (where !== undefined) {\n            queryParameters.set('where', <any>where);\n        }\n\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json',\n            'application/xml',\n            'text/xml',\n            'application/javascript',\n            'text/javascript'\n        ];\n\n\n        headers.set('Content-Type', 'application/json');\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            withCredentials:this.configuration.withCredentials\n        });\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\n        if (extraHttpRequestParams) {\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\n        }\n\n        return this.http.request(path, requestOptions);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/swagger/api/employee.service.ts"],"sourceRoot":""}